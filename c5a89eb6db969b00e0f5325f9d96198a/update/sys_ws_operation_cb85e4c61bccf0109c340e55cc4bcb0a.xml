<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri>/api/x_ibmg3_hcms/broker/discovery/assets</default_operation_uri>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>discovery</name>
        <operation_script><![CDATA[/** 
 * @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. 
 * @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP 
 * Schedule Contract with Kyndryl Corp. 
 * @author Shalini S 
 * @Rest Api is invoked from Kyndryl Marketplace for CD ci creation**/

//CD package
(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    // implement resource here
    var body, strBody, resBody, responseBody, ResponsePayload, strResponsePayload, provider, type;
    body = request.body.data;
    strBody = JSON.stringify(body);
    var entittype = body.entity_type;
    provider = body.provider;
    type = body.gpd.raw_config_data.type;
    var subscriber_id = body.subscriber_id;
    var resource_name = body.gpd.provider_resource_name;
    if (!resource_name) resource_name = body.entity_id;

    var validationError = "false";
    // Validate the Incoming Payload and set the response accordingly 
    validateCIcreationBody(body);

    if (validationError == "false") {

        switch (provider) {
            case 'AWS':
                switch (entittype) {
                    case 'vms':
                        var vm_ci = new Emp_CIWizMapper().createVMInstanceCI(strBody);
                        setResponseBody(vm_ci);
                        break;

                    case 'rds':
                        var rds_ci = new Emp_CIWizMapper().createRDSInstanceCI(strBody);
                        setResponseBody(rds_ci);
                        break;

                    case 'vpcs':
                        var vpc_ci = new Emp_CIWizMapper().createVPCInstanceCI(strBody);
                        setResponseBody(vpc_ci);
                        break;

                    case 's3':
                        var s3_ci = new Emp_CIWizMapper().creates3InstanceCI(strBody);
                        setResponseBody(s3_ci);
                        break;

                    case 'dynamodb':
                        var dYnamodb_ci = new Emp_CIWizMapper().createDynamodbInstanceCI(strBody);
                        setResponseBody(dYnamodb_ci);
                        break;

                    case 'ebs':
                        var ebs_ci = new Emp_CIWizMapper().createEBSInstanceCI(strBody);
                        setResponseBody(ebs_ci);
                        break;

                    case 'elasticloadbalancing':
                        var elb_ci = new Emp_CIWizMapper().createELBInstanceCI(strBody);
                        setResponseBody(elb_ci);
                        break;

                    case 'elasticfilesystem':
                        var efs_ci = new Emp_CIWizMapper().createEFSCI(strBody);
                        setResponseBody(efs_ci);
                        break;

                    case 'stack':
                        var stack = new Emp_CIWizMapper().createStack(strBody);
                        setResponseBody(stack);
                        break;

                    default:
                        raiseResponseError("AWS Entity type not supported");
                }
                break;

            case 'Azure':
                switch (entittype) {
                    case 'virtualMachines':
                        var aZureVm_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureVMCI(strBody);
                        setResponseBody(aZureVm_ci);
                        break;

                    case 'servers':
                        var aZureServer_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureServerCI(strBody);
                        setResponseBody(aZureServer_ci);
                        break;

                    case 'sites':
                        var aZureAppService_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureAppServiceCI(strBody);
                        setResponseBody(aZureAppService_ci);
                        break;

                    case 'trafficmanagerprofiles':
                        var aZuretrafficProfiles_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureTrafficManagerCI(strBody);
                        setResponseBody(aZuretrafficProfiles_ci);
                        break;

                    case 'networkInterfaces':
                        var aZureNetworkInterface_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureNetworkInterfaceCI(strBody);
                        setResponseBody(aZureNetworkInterface_ci);
                        break;

                    case 'virtualNetworks':
                        var vpnInstance_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createVirtualNetwork(strBody);
                        setResponseBody(vpnInstance_ci);
                        break;

                    case 'networkSecurityGroups':
                        var nsg_ci = new Emp_CIWizMapper().createNetworkSecurityGroupsInstanceCI(strBody);
                        setResponseBody(nsg_ci);
                        break;

                    case 'publicIPAddresses':
                        var publicIp_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createpublicIpAddressCI(strBody);
                        setResponseBody(publicIp_ci);
                        break;

                    case 'storageAccounts':
                        var storageAccounts_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureStorageCI(strBody);
                        setResponseBody(storageAccounts_ci);
                        break;

                    case 'virtualMachineScaleSets':
                        var virtualMachines_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureVirtualMachinesScaleCI(strBody);
                        setResponseBody(virtualMachines_ci);
                        break;

                    case 'databaseAccounts':
                        var cosmos_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureCosmosdbCI(strBody);
                        setResponseBody(cosmos_ci);
                        break;

                    case 'Redis':
                        var redis_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureRedisCI(strBody);
                        setResponseBody(redis_ci);
                        break;

                    case 'vaults':
                        var vaults_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureVaultsCI(strBody);
                        setResponseBody(vaults_ci);
                        break;

                    case 'loadBalancers':
                        var lb_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureLoadBalancerCI(strBody);
                        setResponseBody(lb_ci);
                        break;

                    case 'dnszones':
                    case 'privateDnsZones':
                        var dns_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureDnsZonerCI(strBody);
                        setResponseBody(dns_ci);
                        break;

                    case 'managedClusters':
                        var mclusters_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureManagedClustersCI(strBody);
                        setResponseBody(mclusters_ci);
                        break;

                    case 'virtualNetworkGateways':
                        var vn_gateway_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureVNGatewayCI(strBody);
                        setResponseBody(vn_gateway_ci);
                        break;

                    case 'batchAccounts':
                        var batch_accounts_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createBatchAccountsCI(strBody);
                        setResponseBody(batch_accounts_ci);
                        break;

                    case 'backupProtectedItems':
                        var backup_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createBackupItemCI(strBody);
                        setResponseBody(backup_ci);
                        break;

                    case 'managedInstances':
                        var mi_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createManagedInstancesCI(strBody);
                        setResponseBody(mi_ci);
                        break;

                    case 'container_storage':
                        var cStorage_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createContainerStorageCI(strBody);
                        setResponseBody(cStorage_ci);
                        break;

                    case 'applicationGateways':
                        var appGateways_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureApplicationGatewayCI(strBody);
                        setResponseBody(appGateways_ci);
                        break;

                    case 'expressRouteCircuits':
                        var expressRC_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureExpressRouteCI(strBody);
                        setResponseBody(expressRC_ci);
                        break;

                    case 'servers/databases':
                        if (type == 'Microsoft.Sql/servers/databases')
                            var aZureServerDatabase_ci = new Emp_CIWizMapper_Azure_CI_Configurations().createAzureServerDatabaseCI(strBody);
                        setResponseBody(provideraZureServerDatabase_ci);
                        break;

                    default:
                        raiseResponseError("Azure Entity type not supported");
                }
                break;

            case 'GCP':
                switch (entittype) {
                    case 'vms':
                        var gvm_ci = new Emp_CIWizMapper().createVMInstanceCI(strBody);
                        setResponseBody(gvm_ci);
                        break;
                    default:
                        raiseResponseError("GCP Entity type not supported");
                }
                break;

            case 'VRA':
                switch (entittype) {
                    case 'vms':
                        var vraVm_ci = new Emp_CIWizMapper_VRA_CI_Configurations().createVRAVMCI(strBody);
                        if (vraVm_ci) setResponseBody(vraVm_ci);
                        else raiseResponseError("CI Creation Unsuccessful");
                        break;

                    case 'disk':
                        var vraDisk_ci = new Emp_CIWizMapper_VRA_CI_Configurations().createVRADiskCI(strBody);
                        if (vraDisk_ci) setResponseBody(vraDisk_ci);
                        else raiseResponseError("CI Creation Unsuccessful");
                        break;

                    case 'stack':
                        var vraStack = new Emp_CIWizMapper_VRA_CI_Configurations().createVraStack(strBody);
                        if (vraStack) setResponseBody(vraStack);
                        else raiseResponseError("CI Creation Unsuccessful");
                        break;

                    case 'network':
                        var vraNetwork = new Emp_CIWizMapper_VRA_CI_Configurations().createVraNetwork(strBody);
                        if (vraNetwork) setResponseBody(vraNetwork);
                        else raiseResponseError("CI Creation Unsuccessful");
                        break;

                    default:
                        raiseResponseError("VRA Entity type not supported");
                }
                break;

            default:
                raiseResponseError("Provider not supported");
        }
    }


    // ****************************** Validate Incoming Ci Creation Payload and set the response accordingly ***********************************

    function validateCIcreationBody(strBody) {
        if (!(strBody.location.location)) {
            validationError = "true";
            raiseResponseError("Location Attribute missing");
        }


        if (!(strBody.entity_id)) {
            validationError = "true";
            raiseResponseError("Entity ID Attribute missing");
        }

        if (!(strBody.gpd.provider_code)) {
            validationError = "true";
            raiseResponseError("Provider Code Attribute missing");
        }


        if (!(strBody.gpd.correlation_id)) {
            validationError = "true";
            raiseResponseError("Correlation ID Array Attribute missing");
        }

        if (strBody.gpd.provider_resource_name || strBody.entity_id) {

            var resource_exists = new Emp_CI_Creation_Validation_Script().validateResourceExists(strBody.entity_id, strBody.entity_type, strBody.gpd.correlation_id, strBody.provider);

            if (resource_exists == 'Unsupported Resource type') {
                validationError = "true";
                raiseResponseError(" Bad Request: Entity type " + strBody.entity_type + " does not exists ");
            } else {
                var resource_exists_flg, resource_exists_id, resource_exists_coid;

                resource_exists_flg = resource_exists.res_flag.toString();

                resource_exists_id = resource_exists.res_id;
                resource_exists_coid = resource_exists.coid;

                if (resource_exists_flg == 'true' && !resource_exists_coid) {
                    validationError = "true";
                    raiseResponseErrormesg("Configuration Item with the same EntityID already exists", resource_exists_id);
                } else if (resource_exists_coid) { //for server/database
                    validationError = "true";
                    raiseResponseErrormesg("Configuration Item with the same CorrelationID already exists", resource_exists_id);

                }
            }
        }
    }

    function raiseResponseError(message) {
        //Raises a response error
        var theError = new sn_ws_err.ServiceError();
        theError.setStatus(403);
        theError.setMessage("JSON payload error.");
        theError.setDetail(message);
        response.setError(theError);

        //Log the error on processing the request
        new HCMSLogLevel().LogMsg("info", "CI Creation Validation : ERROR: " + message);
    }

    function raiseResponseErrormesg(message, resource_exists_id) {
        //Raises a response error
        var theError = new sn_ws_err.ServiceError();
        theError.setStatus(409);
        theError.setMessage(resource_exists_id.toString());
        theError.setDetail(message);
        response.setError(theError);

        //Log the error on processing the request

        new HCMSLogLevel().LogMsg("info", "CI Creation Validation: ERROR: " + message + '\n' + "Incoming api details are: {u_ci_id: " + resource_exists_id.toString() + " , " + "Entity_id: " + body.entity_id + ' , ' + "subscriber_id: " + subscriber_id + ' , ' + "provider_resource_name " + resource_name);

    }

    function setResponseBody(refRec) {
        ResponsePayload = {
            "u_ci_id": refRec,
            "status": "CI creation Successful"
        };

        strResponsePayload = JSON.stringify(ResponsePayload);

        new HCMSLogLevel().LogMsg("info", provider + " " + entittype + "  CI Creation v1 api" + '\n' + "{subscriber id: " + subscriber_id + ' , ' + " provider_resource_name: " + resource_name + "}" + '\n' + " Response Payload: " + strResponsePayload);
        response.setBody(ResponsePayload);
    }

})(request, response);]]></operation_script>
        <operation_uri>/api/x_ibmg3_hcms/v1/broker/discovery/assets</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/discovery/assets</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>rannep12@in.ibm.com</sys_created_by>
        <sys_created_on>2021-05-12 07:25:13</sys_created_on>
        <sys_id>cb85e4c61bccf0109c340e55cc4bcb0a</sys_id>
        <sys_mod_count>247</sys_mod_count>
        <sys_name>discovery</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_ws_operation_cb85e4c61bccf0109c340e55cc4bcb0a</sys_update_name>
        <sys_updated_by>shalini.s11@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-05-23 07:57:52</sys_updated_on>
        <web_service_definition display_value="HCMS Broker">3a955909dbe3d70037ad349f9d96199a</web_service_definition>
        <web_service_version display_value="v1">e691e14ddbe3d70037ad349f9d961962</web_service_version>
    </sys_ws_operation>
</record_update>
