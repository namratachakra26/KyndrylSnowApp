<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri>/api/x_ibmg3_hcms/broker/changetask</default_operation_uri>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>ChangeTask</name>
        <operation_script><![CDATA[/** 
 * @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. 
 * @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP 
 * Schedule Contract with Kyndryl Corp. 
 * @author Asha Bagade 
 * @Rest Api is invoked from Kyndryl Marketplace for change task update**/

(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    try {
        //Defining variables		
        var body = request.body.data;
        var taskStatus = "";
        var reqItem = '';
        var changeRequest, operationType;
        var orderNumber = '';
        var state = body.u_state;
        var chgTskNum = body.u_number;
        var workNotes = body.u_work_notes;
        var closeNotes = body.u_notes;
        var onHold = body.onHold; //sent for only snow provider
        var strIncomingRequest = JSON.stringify(body);
        //variable to build reponse
        var responsePayload = {};
        //variable to decide if catalog item is of QS
        var qsCatalog = 'false';

        //call Payload validation function
        var validationError = "false";
        validationError = new EmpRestApiUtils().validateBaseTaskElements(body, response);
        //Fetch cloud assignment grp and assigned to
        var assgnGrp = gs.getProperty('x_ibmg3_hcms.emp_cloud.assignment_group');
        var assgnTo = gs.getProperty('x_ibmg3_hcms.emp_cloud.assigned_to');
        var message = '';
        var chgTskdomain;
        // if payload is correct the update happens
        if (validationError == "false") {
            // fetch the Provisioning change task 
            var query = 'active=true^number=' + chgTskNum + '^assignment_group.name=' + assgnGrp + '^assigned_to.name=' + assgnTo;
            var chgTask = new GlideRecord('change_task');
            chgTask.addEncodedQuery(query);
            chgTask.query();
            if (chgTask.next()) {
                //Change request sys_id
                changeRequest = chgTask.change_request;
                reqItem = chgTask.change_request.u_qs_requested_item; // u_qs_requested_item variable present in Qs for change request
                chgTskdomain = chgTask.sys_domain.toString();
                // QS code redirection for change task Update
                if (reqItem && gs.getProperty('x_ibmg3_hcms.enable_quickstart') == "true") { // ritm(u_qs_requested_item) field is populated by QS
                    var ritm = new GlideRecord('sc_req_item');
                    if (ritm.get('sys_id', reqItem)) {
                        orderNumber = ritm.request.correlation_id;
                        //check if QS catalog item
                        var mappingTable = new GlideRecord('u_quickstart_mvp3_mapping_table');
                        if (mappingTable.get('u_catalog_item', ritm.cat_item)) {
                            qsCatalog = 'true';
                        }
                    }
                }
                //Redirection to QS endpoint
                if (qsCatalog == 'true') {
                    new EmpLogLevel().logMsg("info", "Change Task Update api for order " + orderNumber + " - " + strIncomingRequest);
                    if (state == '3')
                        taskStatus = "CLOSE";
                    else
                        taskStatus = "HOLD"; //For failed scenario to create incident
                    //build payload to QS
                    var reqBody = {};
                    reqBody.u_task_status = taskStatus;
                    reqBody.u_work_notes = workNotes;
                    reqBody.u_taskId = chgTskNum;
                    //check if request is for start/stop/restart operation Type
                    //Update won't happen if chg task state is closure and not of operation type
                    if (taskStatus == "CLOSE") {
                        new EmpLogLevel().logMsg('info', 'QS change task ' + chgTskNum + ' closure will be handled by CI Update api for order: ' + orderNumber);
                        message = "QS Change Task : " + chgTskNum + " closure will be handled via CI Update";
                        //Set the response body
                        responsePayload.message = message;
                        response.setBody(responsePayload);
                    }
                    // Update happens for failed/HOLD(incident creation) and Day 2 closure
                    else {
                        var qsAuthProfileId;
                        var domain_seperation_check_flag = new HCMSGetTenatDetails().QSCheckDS();
                        if (domain_seperation_check_flag == 'true') {
                            qsAuthProfileId = GlideApplicationProperty.getValue('x_ibmg3_hcms.api_authenticationprofile', chgTskdomain);
                        } else {
                            qsAuthProfileId = gs.getProperty('x_ibmg3_hcms.api_authenticationprofile');
                        }
                        var myJsonString = JSON.stringify(reqBody);
                        new EmpLogLevel().logMsg('info', 'Change task closure Payload to QS for order: ' + orderNumber + ' - ' + myJsonString);
                        //build the rest message to call the QS endpoint
                        var qs = new sn_ws.RESTMessageV2();
                        var endPoint = gs.getProperty('x_ibmg3_hcms.quick_start.endPoint.ci_update');
                        var instanceURL = gs.getProperty('glide.servlet.uri');
                        //Build the complete URL for the POST message
                        var restEndPoint = instanceURL + endPoint;
                        qs.setEndpoint(restEndPoint);
                        qs.setHttpMethod("post");
                        qs.setAuthenticationProfile("basic", qsAuthProfileId);
                        qs.setRequestHeader("Content-Type", "application/json");
                        qs.setRequestHeader("Accept", "Application/json");
                        qs.setRequestHeader("api_key", "MVP3");
                        qs.setRequestBody(myJsonString);
                        var qsresponse = qs.execute();
                        var parse = JSON.parse(qsresponse.getBody());
                        new EmpLogLevel().logMsg('info', 'Quick Start Response for Change Task ' + chgTskNum + ' Update api for order: ' + orderNumber + " : " + JSON.stringify(parse));
                        var resError = JSON.stringify(parse.result.error);
                        var resDetail = JSON.stringify(parse.result.detail);
                        if (JSON.stringify(parse.result.statusCode) == "200") { // if success
                            new EmpLogLevel().logMsg('info', 'QS change task updated:' + chgTskNum + "for order: " + orderNumber);
                            message = " QS Change Task : " + chgTskNum + " updated sucessfully";
                        } else { // if fails
                            new EmpLogLevel().logMsg('info', 'Quick Start Change task ' + chgTskNum + ' status response for task update' + JSON.stringify(parse) + ' error: ' + resError + ' detail ' + resDetail + " - for order: " + orderNumber);
                            message = " QS Change Task : " + chgTskNum + " update failure";
                        }
                        responsePayload.message = message;
                        response.setBody(responsePayload);
                    }
                }
                //droplet generic catalog change task update begins
                else {
                    //check if RITM is closed, as during change rejection scenario change task is reset to open and should not be updated
                    var reqItm = new GlideRecord('sc_req_item');
                    reqItm.addActiveQuery();
                    reqItm.addQuery('x_ibmg3_hcms_related_change_request', changeRequest);
                    reqItm.query();
                    if (reqItm.next()) {
                        orderNumber = reqItm.request.x_ibmg3_hcms_order_number;
                        new EmpLogLevel().logMsg("info", "Change Task Update api for order " + orderNumber + " : " + strIncomingRequest);
                        chgTask.state = state;
                        chgTask.close_notes = closeNotes;
                        chgTask.work_notes = workNotes;
                        if (onHold == false) // for snow provider the onhold status would be sent
                            chgTask.on_hold = false;
                        chgTask.update();
                        new EmpLogLevel().logMsg('info', 'Change task ' + chgTask.number + ' ,' + chgTask.state.getDisplayValue() + ' for order: ' + orderNumber);
                        message = "Change Task : " + chgTskNum + " updated sucessfully";
                    } else {
                        new EmpLogLevel().logMsg('info', 'Change task update is ignored as, task is already closed/cancelled for order: ' + orderNumber);
                        message = "Change Task : " + chgTskNum + " update is ignored as, task is already closed/cancelled'";
                    }
                    //Set the response body
                    responsePayload.message = message;
                    response.setBody(responsePayload);
                }
            } else { // if change task is not present
                new EmpLogLevel().logMsg('info', 'Change task update is ignored as Change Task not found or already closed/cancelled for order: ' + orderNumber);
                message = ("Change Task : " + chgTskNum + " update is ignored as, task not found or already closed/cancelled");
                //Set the response body
                responsePayload.message = message;
                response.setBody(responsePayload);
            }
        }
    } catch (err) {
        new EmpLogLevel.logMsg("error", "Change Task API " + err);
    }
})(request, response);]]></operation_script>
        <operation_uri>/api/x_ibmg3_hcms/v1/broker/changetask</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/changetask</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>debada54@in.ibm.com</sys_created_by>
        <sys_created_on>2020-03-19 06:09:40</sys_created_on>
        <sys_id>e432ee47db274c1037ad349f9d961910</sys_id>
        <sys_mod_count>143</sys_mod_count>
        <sys_name>ChangeTask</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_ws_operation_e432ee47db274c1037ad349f9d961910</sys_update_name>
        <sys_updated_by>namrata.chakraborty@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-05-29 08:12:44</sys_updated_on>
        <web_service_definition display_value="HCMS Broker">3a955909dbe3d70037ad349f9d96199a</web_service_definition>
        <web_service_version display_value="v1">e691e14ddbe3d70037ad349f9d961962</web_service_version>
    </sys_ws_operation>
</record_update>
