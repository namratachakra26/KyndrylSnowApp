<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri>/api/x_ibmg3_hcms/broker/changetask</default_operation_uri>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>ChangeTask</name>
        <operation_script><![CDATA[/** 
* @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. 
* @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP 
* Schedule Contract with Kyndryl Corp. 
 * @author Asha Bagade 
 * @Rest Api is invoked from Kyndryl Marketplace for change task update**/

(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    try {
        //Defining variables
        var body = request.body.data;
        var task_status = "";
        var ritm1 = '';
        var change_request, operationType;
        var orderNumber = '';
        var state = body.u_state;
        var chtsnumber = body.u_number;
        var worknotes = body.u_work_notes;
        var closenotes = body.u_notes;
        var onHold = body.onHold; //sent for only snow provider
        var strIncomingRequest = JSON.stringify(body);
        //variable to build reponse
        var responsePayload = {};
        //variable to decide if catalog item is of QS
        var qsCatalog = 'false';

        //call Payload validation function
        var validationError = "false";
        validateBaseElements(body);
        //Fetch cloud assignment grp and assigned to
        var assgnGrp = gs.getProperty('x_ibmg3_hcms.emp_cloud.assignment_group');
        var assgnTo = gs.getProperty('x_ibmg3_hcms.emp_cloud.assigned_to');
        var message = '';
        var chgTskdomain;
        // if payload is correct the update happens
        if (validationError == "false") {
            // fetch the Provisioning change task 
            var chg_Task = new GlideRecord('change_task');
            chg_Task.addActiveQuery();
            chg_Task.addQuery("number", chtsnumber);
            chg_Task.addQuery('assignment_group.name', assgnGrp);
            chg_Task.addQuery('assigned_to.name', assgnTo);
            chg_Task.query();
            if (chg_Task.next()) {
                //Change request sys_id
                change_request = chg_Task.change_request;
                ritm1 = chg_Task.change_request.u_qs_requested_item; // u_qs_requested_item variable present in Qs for change request
				chgTskdomain = chg_Task.sys_domain.toString();
                // QS code redirection for change task Update
                if (ritm1 && gs.getProperty('x_ibmg3_hcms.Enable_QuickStart') == "true") { // ritm(u_qs_requested_item) field is populated by QS
                    var reqItem = new GlideRecord('sc_req_item');
                    if (reqItem.get('sys_id', ritm1)) {
                        orderNumber = reqItem.request.correlation_id;
                        //check if QS catalog item
                        var mappingTable = new GlideRecord('u_quickstart_mvp3_mapping_table');
                        if (mappingTable.get('u_catalog_item', reqItem.cat_item)) {
                            qsCatalog = 'true';
                        }
                    }
                }
                //Redirection to QS endpoint
                if (qsCatalog == 'true') {
                    new HCMSLogLevel().LogMsg("info", "Change Task Update api for order " + orderNumber + " - " + strIncomingRequest);
                    if (state == '3')
                        task_status = "CLOSE";
                    else
                        task_status = "HOLD"; //For failed scenario to create incident
                    //build payload to QS
                    var reqbody = {};
                    reqbody.u_task_status = task_status;
                    reqbody.u_work_notes = worknotes;
                    reqbody.u_taskId = chtsnumber;
                    //check if request is for start/stop/restart operation Type
                    //Update won't happen if chg task state is closure and not of operation type
                    if (task_status == "CLOSE") {
                        new HCMSLogLevel().LogMsg('info', 'QS change task ' + chtsnumber + ' closure will be handled by CI Update api for order: ' + orderNumber);
                        message = "QS Change Task : " + chtsnumber + " closure will be handled via CI Update";
                        //Set the response body
                        responsePayload.message = message;
                        response.setBody(responsePayload);
                    }
                    // Update happens for failed/HOLD(incident creation) and Day 2 closure
                    else {
                        var qs_auth_profile_id;
                        var domain_seperation_check_flag = new HCMSGetTenatDetails().QSCheckDS();

                        if (domain_seperation_check_flag == 'true') {
                            qs_auth_profile_id = GlideApplicationProperty.getValue('x_ibmg3_hcms.API_AuthenticationProfile', chgTskdomain);
                        } else {

                            qs_auth_profile_id = gs.getProperty('x_ibmg3_hcms.API_AuthenticationProfile');
                        }

                        var myJSONString = JSON.stringify(reqbody);
                        new HCMSLogLevel().LogMsg('info', 'Change task closure Payload to QS for order: ' + orderNumber + ' - ' + myJSONString);
                        //build the rest message to call the QS endpoint
                        var qs = new sn_ws.RESTMessageV2();
                        var end_point = gs.getProperty('x_ibmg3_hcms.quick_start.end_point.ci_update');
                        var instanceURL = gs.getProperty('glide.servlet.uri');
                        //Build the complete URL for the POST message
                        var restEndPoint = instanceURL + end_point;
                        qs.setEndpoint(restEndPoint);
                        qs.setHttpMethod("post");
                        qs.setAuthenticationProfile("basic", qs_auth_profile_id);
                        qs.setRequestHeader("Content-Type", "application/json");
                        qs.setRequestHeader("Accept", "Application/json");
                        qs.setRequestHeader("api_key", "MVP3");
                        qs.setRequestBody(myJSONString);
                        var qsresponse = qs.execute();
                        var parse = JSON.parse(qsresponse.getBody());
                        new HCMSLogLevel().LogMsg('info', 'Quick Start Response for Change Task ' + chtsnumber + ' Update api for order: ' + orderNumber + " : " + JSON.stringify(parse));
                        var resError = JSON.stringify(parse.result.error);
                        var resDetail = JSON.stringify(parse.result.detail);
                        if (JSON.stringify(parse.result.statusCode) == "200") { // if success
                            new HCMSLogLevel().LogMsg('info', 'QS change task updated:' + chtsnumber + "for order: " + orderNumber);
                            message = " QS Change Task : " + chtsnumber + " updated sucessfully";
                        } else { // if fails
                            new HCMSLogLevel().LogMsg('info', 'Quick Start Change task ' + chtsnumber + ' status response for task update' + JSON.stringify(parse) + ' error: ' + resError + ' detail ' + resDetail + " - for order: " + orderNumber);
                            message = " QS Change Task : " + chtsnumber + " update failure";
                        }
                        responsePayload.message = message;
                        response.setBody(responsePayload);
                    }
                }
                //droplet generic catalog change task update begins
                else {
                    //check if RITM is closed, as during change rejection scenario change task is reset to open and should not be updated
                    var ritm = new GlideRecord('sc_req_item');
                    ritm.addActiveQuery();
                    ritm.addQuery('x_ibmg3_hcms_related_change_request', change_request);
                    ritm.query();
                    if (ritm.next()) {
                        orderNumber = ritm.request.x_ibmg3_hcms_order_number;
                        new HCMSLogLevel().LogMsg("info", "Change Task Update api for order " + orderNumber + " : " + strIncomingRequest);
                        chg_Task.state = state;
                        chg_Task.close_notes = closenotes;
                        chg_Task.work_notes = worknotes;
                        if (onHold == false) // for snow provider the onhold status would be sent
                            chg_Task.on_hold = false;
                        chg_Task.update();
                        new HCMSLogLevel().LogMsg('info', 'Change task ' + chg_Task.number + ' ,' + chg_Task.state.getDisplayValue() + ' for order: ' + orderNumber);
                        message = "Change Task : " + chtsnumber + " updated sucessfully";
                    } else {
                        new HCMSLogLevel().LogMsg('info', 'Change task update is ignored as, task is already closed/cancelled for order: ' + orderNumber);
                        message = "Change Task : " + chtsnumber + " update is ignored as, task is already closed/cancelled'";
                    }
                    //Set the response body
                    responsePayload.message = message;
                    response.setBody(responsePayload);
                }
            } else { // if change task is not present
                new HCMSLogLevel().LogMsg('info', 'Change task update is ignored as Change Task not found or already closed/cancelled for order: ' + orderNumber);
                message = ("Change Task : " + chtsnumber + " update is ignored as, task not found or already closed/cancelled");
                //Set the response body
                responsePayload.message = message;
                response.setBody(responsePayload);
            }
        }
    } catch (err) {
        new HCMSLogLevel.LogMsg("error", "Change Task API " + err);
    }

    //********* VALIDATION FUNCTIONS  ************
    //Function to validate the base level elements
    function validateBaseElements(bBody) {
        //change task number
        if (!bBody.u_number) {
            validationError = "true";
            raiseResponseError("change_task number attribute missing");
        }
        //change task state
        if (!bBody.u_state && !bBody.hasOwnProperty('onHold')) {
            validationError = "true";
            raiseResponseError("change_task state attribute missing");
        }
        //change task work notes
        if (!bBody.u_work_notes) {
            validationError = "true";
            raiseResponseError("change_task worknotes attribute missing");
        }
        //change task close notes
        if (!bBody.u_notes) {
            validationError = "true";
            raiseResponseError("change_task closenotes attribute missing");
        }
    }

    function raiseResponseError(message) {
        //Raises a response error
        var theError = new sn_ws_err.ServiceError();
        theError.setStatus(404);
        theError.setMessage("Change Task update aborted");
        theError.setDetail(message);
        response.setError(theError);
        //Log the error on processing the change task update
        new HCMSLogLevel().LogMsg("error", "CHANGE TASK UPDATE: ERROR: Change Task update aborted.");
        new HCMSLogLevel().LogMsg("error", "CHANGE TASK UPDATE: ERROR: " + message);
    }

})(request, response);]]></operation_script>
        <operation_uri>/api/x_ibmg3_hcms/v1/broker/changetask</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/changetask</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>debada54@in.ibm.com</sys_created_by>
        <sys_created_on>2020-03-19 06:09:40</sys_created_on>
        <sys_id>e432ee47db274c1037ad349f9d961910</sys_id>
        <sys_mod_count>133</sys_mod_count>
        <sys_name>ChangeTask</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_ws_operation_e432ee47db274c1037ad349f9d961910</sys_update_name>
        <sys_updated_by>asha.bagade@kyndryl.com</sys_updated_by>
        <sys_updated_on>2023-11-28 08:05:29</sys_updated_on>
        <web_service_definition display_value="HCMS Broker">3a955909dbe3d70037ad349f9d96199a</web_service_definition>
        <web_service_version display_value="v1">e691e14ddbe3d70037ad349f9d961962</web_service_version>
    </sys_ws_operation>
</record_update>
