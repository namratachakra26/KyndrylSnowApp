<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmg3_hcms.EmpAuthProfileConfiguration</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description>/** &#13;
* @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. &#13;
* @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP &#13;
* Schedule Contract with Kyndryl Corp.  &#13;
* @author Shalini S &#13;
* @Script Include is used to fetch and update properties&#13;
**/</description>
        <name>EmpAuthProfileConfiguration</name>
        <script><![CDATA[var EmpAuthProfileConfiguration = Class.create();
EmpAuthProfileConfiguration.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {


    getAuthProfile: function() {

        var authVal = this.getParameter('auth_name');
        var approvalWfExt = this.getParameter('approval_wf_name');
        var usr = new GlideRecord('sys_user');
        if (usr.get('user_name', authVal)) {
            var usrDomain = usr.sys_domain.getDisplayValue().toString();
            var bsAuth = new GlideRecord('sys_auth_profile_basic');
            if (bsAuth.get('name', authVal)) {
                var bsAuthVal = bsAuth.sys_id;
                if (usrDomain != 'global') {
                    GlideApplicationProperty.setValue('x_ibmg3_hcms.approval.sub.workflow.name', approvalWfExt, usrDomain);
                    GlideApplicationProperty.setValue('x_ibmg3_hcms.api_authenticationprofile', bsAuthVal, usrDomain);
                    return 'Domain Specific AuthProfile Property Updated';
                } else {
                    gs.setProperty('x_ibmg3_hcms.api_authenticationprofile', usr.sys_id);
                    gs.setProperty('x_ibmg3_hcms.approval.sub.workflow.name', approvalWfExt);
                    return 'AuthProfile Property Updated';
                }
            }
        }

    },

    updateProperties: function() {
        try {
            var authVal = this.getParameter('auth_name');
            var approvalWfExt = this.getParameter('approval_wf_name');
            var discEn = this.getParameter('discovery_enabled');
            var qkstartEn = this.getParameter('qkstart_enabled');
            var retryCount = this.getParameter('retry_count');
            var anonymousUser = this.getParameter('anonymous_user');
            var outMid = this.getParameter('out_midserver');
            var midDet = this.getParameter('mid_details');
            var cloudAg = this.getParameter('cloud_ag');
            var cloudAt = this.getParameter('cloud_at');
            var ciAssgrp = this.getParameter('cloud_ci_ag');
            var aVersion = this.getParameter('adapterVersion');
            var apiCreden = this.getParameter('api_credential');
            var empUrl = this.getParameter('mcmp_url');
            var usrDomain, apiCred;

            if (apiCreden) {
                var usr = new GlideRecord('api_key_credentials');
                if (usr.get('sys_id', apiCreden))
                    apiCred = usr.name;
                else
                    apiCred = apiCreden;
            }

            //get auth profile sysid
            var bsAuth = new GlideRecord('sys_auth_profile_basic');
            if (bsAuth.get('name', authVal))
                var bsAuthVal = bsAuth.sys_id;
            else bsAuthVal = '';

            if (!approvalWfExt) {
                approvalWfExt = '';
            }

            //check Domain Separation
            var domainFlg = this.checkDomainSeparation();
            if (domainFlg == 'false') {
                gs.setProperty('x_ibmg3_hcms.api_authenticationprofile', bsAuthVal);
                gs.setProperty('x_ibmg3_hcms.emp_api_key_credential', apiCred);
                gs.setProperty('x_ibmg3_hcms.approval.sub.workflow.name', approvalWfExt);
                if (retryCount) gs.setProperty('x_ibmg3_hcms.outbound_retry_count', retryCount);
                gs.setProperty('x_ibmg3_hcms.mvp3.discovery.enabled', discEn);
                gs.setProperty('x_ibmg3_hcms.enable_quickstart', qkstartEn);
                gs.setProperty('x_ibmg3_hcms.allow.anonymous.user', anonymousUser);
                gs.setProperty('x_ibmg3_hcms.adapter.version.configuration', aVersion); // if new ui is used, versioning to v4 for outbound calls
                if (outMid) gs.setProperty('x_ibmg3_hcms.emp.outbound_calls.through.midserver', outMid);
                if (midDet) gs.setProperty('x_ibmg3_hcms.emp.midserver.details', midDet);
                if (cloudAg) gs.setProperty('x_ibmg3_hcms.emp_cloud.assignment_group', cloudAg);
                if (cloudAt) gs.setProperty('x_ibmg3_hcms.emp_cloud.assigned_to', cloudAt);
                if (ciAssgrp) gs.setProperty('x_ibmg3_hcms.emp_cloud.ci_assignment_group', ciAssgrp);
                if (empUrl) gs.setProperty('x_ibmg3_hcms.emp.tenant.url', empUrl);

                gs.info('Auth Profile Properties for Non Domain Seperation Updated successfully');
                return 'Auth Profile Properties for Non Domain Seperated ';
            } else {

                //new UI changes                   
                var usr1 = new GlideRecord('sys_user');
                if (usr1.get('sys_id', gs.getUserID()))
                    usrDomain = usr1.sys_domain;

                GlideApplicationProperty.setValue('x_ibmg3_hcms.emp.outbound_calls.through.midserver', outMid, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.emp.midserver.details', midDet, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.emp_cloud.assignment_group', cloudAg, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.emp_cloud.assigned_to', cloudAt, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.emp_cloud.ci_assignment_group', ciAssgrp, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.approval.sub.workflow.name', approvalWfExt, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.api_authenticationprofile', bsAuthVal, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.emp_api_key_credential', apiCred, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.outbound_retry_count', retryCount, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.mvp3.discovery.enabled', discEn, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.enable_quickstart', qkstartEn, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.allow.anonymous.user', anonymousUser, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.emp.tenant.url', empUrl, usrDomain);
                GlideApplicationProperty.setValue('x_ibmg3_hcms.adapter.version.configuration', aVersion, usrDomain); // if new ui is used, versioning to v4 for outbound calls in DS
                gs.info('Auth Profile Properties for Domain Seperation Updated successfully');
                return 'Auth Profile Properties for Domain Seperated ';
            }

        } catch (err) {
            new EmpLogLevel().logMsg("info", "Updating Configurations to System Properties error " + err);
        }

    },

    fetchProperties: function() {
        try {
            var arr = {};
            var apiCred = this.getParameter('api_credential');
            //check Domain Separation
            var domainFlg = this.checkDomainSeparation();

            if (domainFlg == 'false') {
                var authProf = gs.getProperty('x_ibmg3_hcms.api_authenticationprofile');
                var auth = new GlideRecord('sys_auth_profile_basic');
                if (auth.get('sys_id', authProf))
                    arr.authName = (auth.name).toString();

                arr.appWfl = gs.getProperty('x_ibmg3_hcms.approval.sub.workflow.name');
                arr.apiKeyCred = gs.getProperty('x_ibmg3_hcms.emp_api_key_credential');
                arr.retryC = gs.getProperty('x_ibmg3_hcms.outbound_retry_count');
                arr.discE = gs.getProperty('x_ibmg3_hcms.mvp3.discovery.enabled');
                arr.quickE = gs.getProperty('x_ibmg3_hcms.enable_quickstart');
                arr.anonymousUsr = gs.getProperty('x_ibmg3_hcms.allow.anonymous.user');
                arr.outMid = gs.getProperty('x_ibmg3_hcms.emp.outbound_calls.through.midserver');
                arr.midDet = gs.getProperty('x_ibmg3_hcms.emp.midserver.details');
                arr.cloudAG = gs.getProperty('x_ibmg3_hcms.emp_cloud.assignment_group');
                arr.cloudAssign = gs.getProperty('x_ibmg3_hcms.emp_cloud.assigned_to');
                arr.cloudCIAG = gs.getProperty('x_ibmg3_hcms.emp_cloud.ci_assignment_group');
                arr.mcmpUrl = gs.getProperty('x_ibmg3_hcms.emp.tenant.url');

                var jsonArr = JSON.stringify(arr);
                return jsonArr;

            } else {
                //new UI changes to set domain             
                var usr1 = new GlideRecord('sys_user');
                if (usr1.get('sys_id', gs.getUserID()))
                    usrDomain = usr1.sys_domain;
                var authProfDs = GlideApplicationProperty.getValue('x_ibmg3_hcms.api_authenticationprofile', usrDomain);
                var authDs = new GlideRecord('sys_auth_profile_basic');
                if (authDs.get('sys_id', authProfDs))
                    arr.authName = (authDs.name).toString();

                arr.appWfl = GlideApplicationProperty.getValue('x_ibmg3_hcms.approval.sub.workflow.name', usrDomain);
                arr.apiKeyCred = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp_api_key_credential', usrDomain);
                arr.retryC = GlideApplicationProperty.getValue('x_ibmg3_hcms.outbound_retry_count', usrDomain);
                arr.discE = GlideApplicationProperty.getValue('x_ibmg3_hcms.mvp3.discovery.enabled', usrDomain);
                arr.quickE = GlideApplicationProperty.getValue('x_ibmg3_hcms.enable_quickstart', usrDomain);
                arr.anonymousUsr = GlideApplicationProperty.getValue('x_ibmg3_hcms.allow.anonymous.user', usrDomain);
                arr.outMid = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp.outbound_calls.through.midserver', usrDomain);
                arr.midDet = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp.midserver.details', usrDomain);
                arr.cloudAG = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp_cloud.assignment_group', usrDomain);
                arr.cloudAssign = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp_cloud.assigned_to', usrDomain);
                arr.cloudCIAG = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp_cloud.ci_assignment_group', usrDomain);
                arr.empUrl = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp.tenant.url', usrDomain);

                var jsonArrDs = JSON.stringify(arr);
                return jsonArrDs;
            }
        } catch (err) {
            new EmpLogLevel().logMsg("info", "Fetching Values from System Properties error " + err);
        }
    },


    checkDomainSeparation: function() {
        var plgin = new GlideRecord('sys_plugins');
        plgin.addQuery('source', 'com.glide.domain');
        plgin.query();
        plgin.next();
        if (plgin.active) {
            return 'true';
        } else {
            return 'false';
        }
    },

    getIntegratedCreds: function() {
        var propObj = {};
        propObj.version = gs.getProperty('x_ibmg3_hcms.adapter.version.configuration');
        var propObjs = JSON.stringify(propObj);
        return propObjs;
    },
    type: 'EmpAuthProfileConfiguration'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>rannep12@in.ibm.com</sys_created_by>
        <sys_created_on>2021-04-02 09:29:47</sys_created_on>
        <sys_id>72a2cb8d1b5b68109c340e55cc4bcbcc</sys_id>
        <sys_mod_count>144</sys_mod_count>
        <sys_name>EmpAuthProfileConfiguration</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_script_include_72a2cb8d1b5b68109c340e55cc4bcbcc</sys_update_name>
        <sys_updated_by>sreedhar.mamilla@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-05-29 08:09:21</sys_updated_on>
    </sys_script_include>
</record_update>
