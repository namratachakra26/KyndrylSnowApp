<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmg3_hcms.GenerateSingleCartV2</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Generate Request item(s) using scoped Cart API for V2 version&#13;
/** &#13;
* @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. &#13;
* @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP &#13;
* Schedule Contract with Kyndryl Corp. &#13;
* @author Asha Bagade &#13;
* @Script Include is invoked from Scripted Rest API , to process Request and RITMcreation&#13;
**/</description>
        <name>GenerateSingleCartV2</name>
        <script><![CDATA[var GenerateSingleCartV2 = Class.create();
GenerateSingleCartV2.prototype = {
    initialize: function() {},

    processRequest: function(str, location, requestedFor) {
        try {
            var parser = JSON.parse(str);
            var ritms = parser.requestedItems;
            //Log Requested items count from the incoming payload
            var ritmCount = ritms.length;
            new EmpLogLevel().logMsg('info', 'No of Requested items for Order ' + parser.orderNumber + ' is: ' + ritmCount);
            var requestFor = requestedFor.toString();
            var strShortDescription = parser.orderPurpose;
            var strDescription = parser.detailedComments;
            // variable to hold the custom approval workflow extension which is optional
            var approvalExtWorkFlow = gs.getProperty('x_ibmg3_hcms.approval.sub.workflow.name');
            //Obtaining emp location Information
            var empLocation = location;
            //OrderNumber
            var empOrderNumber = parser.orderNumber;
            //variable to hold the Request type(new/edit/terminate/operations)
            var empRequestType = parser.requestType;
            var catalogItemName, changeApprovalRequired, chgtaskCreationFlg, labels, changeRequired = '';
            var ApprovalHold = parser.requestApprovalHold;

            if (empRequestType == 'New') {
                empRequestType = '1';
            }
            if (empRequestType == 'Terminate') {
                empRequestType = '2';
            }
            if (empRequestType == 'Edit') {
                empRequestType = '3';
            }
            if (empRequestType == 'operation') {
                empRequestType = '4';
            }

            var empOrderSubmittedDate = parser.orderSubmittedTime;
            //Variable to hold the sys_id of catalog item
            var grSysId, cart;   //initialze variable for cart api

            //function to add multiple items into the cart

            var arr = [];
            /* Create one or more RITM based on payload */
            for (var i = 0; i < ritmCount; i++) {
                gs.info("Kyndryl Marketplace order_number" + empOrderNumber + "service " + parser.requestedItems[i].serviceName);

                cart = new sn_sc.CartJS();

                var itemServiceName = parser.requestedItems[i].serviceName;
                var serviceOfferingId = parser.requestedItems[i].serviceOfferingId;
                var soiID = parser.requestedItems[i].serviceOfferingInstanceId;
                var serviceProvider = parser.requestedItems[i].serviceOfferingProvider;
                var categoryID = parser.requestedItems[i].category;
                catalogItemName = parser.requestedItems[i].catalog_item_name;
                var serviceOfferingName = parser.requestedItems[i].serviceOfferingName;
                var serviceOfferingGroup = parser.requestedItems[i].serviceOfferingGroup;
                var ServiceOfferingDescription = parser.requestedItems[i].short_description;
                var empVersion = parser.requestedItems[i].mcmpVersion.label;
                labels = parser.requestedItems[i].labels;
                var catItemId = parser.requestedItems[i].catalogItemId;
                if (catItemId)
                    grSysId = catItemId;
                else {
                    //Fetch the sys_id of the catalog item
                    var catItem = new GlideRecord('sc_cat_item');
                    catItem.addQuery('sys_name', catalogItemName);
                    catItem.query();
                    if (catItem.next()) {
                        grSysId = (catItem.sys_id).toString();
                    }
                }
                changeApprovalRequired = parser.requestedItems[i].changeApprovalRequired;
                chgtaskCreationFlg = parser.requestedItems[i].createChangeTask;
                if (!chgtaskCreationFlg) chgtaskCreationFlg = 'true';
                changeRequired = parser.requestedItems[i].changeRequired;
                if (changeApprovalRequired == "true")
                    changeApprovalRequired = "normal"; //Has change Approval
                else
                    changeApprovalRequired = "standard"; //No Approval
                //initialize the catalog item fields and variables with all data
                var item = {
                    'sysparm_id': grSysId,
                    'sysparm_quantity': '1',
                    'variables': {
                        'var_requested_for': requestFor,
                        'short_description': strShortDescription,
                        'var_description': strDescription,
                        'var_broker_location': empLocation,
                        'order_number': empOrderNumber,
                        'var_request_type': empRequestType,
                        'var_approval_workflow': approvalExtWorkFlow,
                        'var_broker_json': str,
                        'var_order_date': empOrderSubmittedDate,
                        'var_service_offering_id': serviceOfferingId,
                        'var_service_instance_id': soiID,
                        'var_service_name': itemServiceName,
                        'var_offering_provider': serviceProvider,
                        'var_consume_category': categoryID,
                        'var_change_type': changeApprovalRequired,
                        'var_create_changetask': chgtaskCreationFlg,
                        'var_service_offering_name': serviceOfferingName,
                        'var_service_offering_group': serviceOfferingGroup,
                        'var_mcmp_version': empVersion,
                        'var_labels': labels,
                        'var_change_required': changeRequired

                    }
                };
                //adding item to cart array
                cart.addToCart(item);
            }

            var requestObj = cart.submitOrder(item);

            if (parser.requestApprovalHold) {
                var reqObj = new GlideRecord('sc_request');
                reqObj.addQuery('number', requestObj.request_number);
                reqObj.query();
                if (reqObj.next()) {
                    reqObj.x_ibmg3_hcms_requestapprovalhold = ApprovalHold;
                    reqObj.update();
                }
            }

            return requestObj.request_number;
        } catch (ex) {
            new EmpLogLevel().logMsg('info', "generate request using cart api error message " + ex);
        }
    },

    //function used to populate the requested for on Request form 
    getRequestedFor: function(requestedFor) {
        var reqUserId = new GlideRecord('sys_user');
        reqUserId.addEncodedQuery('email=' + requestedFor + '^ORuser_name =' + requestedFor);
        reqUserId.query();
        if (reqUserId.next()) {
            return reqUserId.sys_id.toString(); //return the sysid of user
        }
    },
    type: 'GenerateSingleCartV2'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>debada54@in.ibm.com</sys_created_by>
        <sys_created_on>2019-12-12 07:07:12</sys_created_on>
        <sys_id>ad804263db6100d037ad349f9d9619b7</sys_id>
        <sys_mod_count>96</sys_mod_count>
        <sys_name>GenerateSingleCartV2</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_script_include_ad804263db6100d037ad349f9d9619b7</sys_update_name>
        <sys_updated_by>sreedhar.mamilla@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-05-29 08:13:13</sys_updated_on>
    </sys_script_include>
</record_update>
