<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Enterprise Marketplace Configuration">1cb704ffdb18e0502019d90d68961925</cat_item>
        <cat_variable>IO:6b285e6cdbdd24102019d90d6896196f</cat_variable>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>true</isolate_script>
        <messages/>
        <name>Fetch Configurations from Emp</name>
        <order/>
        <script><![CDATA[function onChange(control, oldValue, newValue, isLoading) {
    if (isLoading || newValue == 'false') {

        g_form.clearValue('multistep_approval');
        g_form.clearValue('provisioningservicenow');
        // g_form.clearValue('adapterversion');
        g_form.clearValue('approval_workflow');
        g_form.clearValue('qs_auth_profile');
        g_form.clearValue('external_context_list');
        g_form.clearValue('additional_dataschema');
        g_form.clearValue('external_context_list');

        g_form.clearValue('additional_dataschema');
        g_form.clearValue('account_name');
        g_form.clearValue('url');
        g_form.clearValue('ordertracking');
        g_form.clearValue('externalapproval');
        g_form.clearValue('inventory');
        g_form.clearValue('external_context');
        g_form.clearValue('contexts');
        g_form.clearValue('catalog_mapping_condition');
        g_form.clearValue('fullfilment_policies');
        g_form.clearValue('var_enable_common_discovery');
        g_form.clearValue('var_enable_discovery_aws');
        g_form.clearValue('var_enable_discovery_azure');
        g_form.clearValue('var_enable_discovery_gcp');
        g_form.clearValue('var_enable_discovery_vra');
        return;
    }
    if (g_form.getValue('mcmp_endpoint') == '' || g_form.getDisplayBox('mcmp_api_credential').value == '') {
        alert("please enter the emp endpoint and select the emp api credentials first");
        g_form.clearValue('get_config_values');
        return;
    }

    var cred = g_form.getDisplayBox('mcmp_api_credential').value;
    var endPoint = g_form.getValue('mcmp_endpoint');

    var ga = new GlideAjax('EmpFetchConfiguration');
    ga.addParam('sysparm_name', 'fetchConfigValues');
    ga.addParam('sysparm_epoint', endPoint);
    ga.addParam('sysparm_cred', cred);
    ga.getXML(setConfigurationValues);

    function setConfigurationValues(response) {

        var answer = response.responseXML.documentElement.getAttribute("answer");
        var concat = '';
        //check if the get is not coming as 200 it should not be JSON object
        try {
            var configBody_json = JSON.parse(answer);
        } catch (error) {
            alert("Please check if the credentials and the URL are entered correctly or not?");

        }
        var empConfigs = JSON.stringify(configBody_json);
        var configCode, configOutput;
        var adapterversion = g_form.getValue('adapterversion');

        if (adapterversion == "v3") {
            configOutput = configBody_json.result;
        } else {
            configCode = configBody_json.code;
            configOutput = configBody_json.instance.result.result;
        }
		

        // If the get call is a success with 200 code
        //map feature configurations
        if (adapterversion != "v3") {
            if ((JSON.stringify(configOutput.featureConfigurations)) !== '{}') {

                if (!configOutput.featureConfigurations.configurationvalue.enableProvisioning) {
                    g_form.setValue('provisioningservicenow', false);
                } else {
                    g_form.setValue('provisioningservicenow', configOutput.featureConfigurations.configurationvalue.enableProvisioning);
                }

                var additionalDataSchema = JSON.stringify(configOutput.featureConfigurations.configurationvalue.additionalDataSchema); //v2

                var externalContext = JSON.stringify(configOutput.featureConfigurations.configurationvalue.externalcontextList); //v2

                if (externalContext) {
                    g_form.setValue('external_context_list', externalContext);
                }
                //If additionalDataSchema is an empty object default to below value
                if (additionalDataSchema === '{}') {
                    additionalDataSchema = {
                        "type": "object",
                        "properties": {
                            "addData": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "addData"
                        ],
                        "additionalProperties": false
                    };
                    g_form.setValue('additional_dataschema', JSON.stringify(additionalDataSchema));
                } else
                    g_form.setValue('additional_dataschema', additionalDataSchema);


                //set encodeContext
                var encodeContxt = configOutput.featureConfigurations.configurationvalue.encodeContext; //v2
                g_form.setValue('encodeContext', encodeContxt);

            } else {
                // if the feature configuration is empty
                g_form.clearValue('multistep_approval');
                g_form.clearValue('external_context_list');
                var additionalDataSchemaDefault = {
                    "type": "object",
                    "properties": {
                        "addData": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "addData"
                    ],
                    "additionalProperties": false
                };
                g_form.setValue('additional_dataschema', JSON.stringify(additionalDataSchemaDefault));
            }

            var consumeNamspce = configOutput.featureConfigurations.configurationvalue.consumeNamespace;
            g_form.setValue('consume_namespace', consumeNamspce);

        }

        //feature chk
        if ((JSON.stringify(configOutput.featureConfigurations)) !== '{}') {
            if (!configOutput.featureConfigurations.configurationvalue.approvalPolicySupport) { //v3
                g_form.setValue('multistep_approval', false);
            } else {
                g_form.setValue('multistep_approval', configOutput.featureConfigurations.configurationvalue.approvalPolicySupport.multistep);
            }
            var approvalWorkflw = configOutput.featureConfigurations.configurationvalue.approvalWorkflow; //v3

            //if the payload contains custom workflow extension name
            if (approvalWorkflw) {
                g_form.setValue('approval_workflow', approvalWorkflw);
            }


            var authprofile = configOutput.featureConfigurations.configurationvalue.qsAuthProfile; //v3

            //if authenfication profile is present
            if (authprofile) {
                g_form.setValue('qs_auth_profile', authprofile);
            }
        }

        var accountConfigs = configOutput.accountConfigurations;

        // if the account configuration is not empty
        if (accountConfigs.length > 0) {
            for (var i = 0; i < accountConfigs.length; i++) {
                var accountConfig = accountConfigs[i].accountName;
                var url = accountConfigs[i].url;
				if (adapterversion == "v3" && accountConfigs[i].accessTags) {
					var arr = [];
					for (var k = 0; k < accountConfigs[i].accessTags.length; k++) {
                        arr.push(JSON.stringify(accountConfigs[i].accessTags[k]));
						var str = '[' + arr + ']';
                        g_form.setValue('accesstags', str);
                    }

									}
				
				//if v2 check
                if (adapterversion != "v3") {
                    for (var l = 0; l < accountConfigs[i].purpose.length; l++) {
                        if (accountConfigs[i].purpose[l] == 'ordertracking') {
                            g_form.setValue('ordertracking', true);
                        }
                        if (accountConfigs[i].purpose[l] == 'externalapproval') {

                            g_form.setValue('externalapproval', true);
                        }
                        if (accountConfigs[i].purpose[l] == 'Inventory') {

                            g_form.setValue('inventory', true);
                        }
                        if (accountConfigs[i].purpose[l] == 'external_context') {

                            g_form.setValue('external_context', true);
                        }
                    }

                    for (var j = 0; j < accountConfigs[i].contexts.length; j++) {
                        var contextValues = JSON.stringify(accountConfigs[i].contexts[j]);
                        g_form.setValue('contexts', contextValues);
                    }
                }
				}
				
			if(accountConfig){
                g_form.setValue('account_name', accountConfig);
				g_form.setReadOnly('account_name', true);
			}else{
				g_form.setReadOnly('account_name', false);
			}
                
			
			g_form.setValue('url', url);

               
            
        } else // if account configuration is empty
        {
            g_form.clearValue('contexts');
            g_form.clearValue('account_name');
            g_form.clearValue('url');
        }


        var policyConfigs = configOutput.policyConfigurations;

        //map catalogMappingPolicy
        if ((JSON.stringify(policyConfigs.catalogMappingPolicy)) !== '{}') {

            var mappingConfigs = JSON.stringify(policyConfigs.catalogMappingPolicy);
            g_form.setValue('catalog_mapping_condition', mappingConfigs);
        }
        // if catalg mapping policy is empty
        else {
            g_form.clearValue('catalog_mapping_condition');
        }
        //map fulfillmentPolicies
        if (policyConfigs.fulfillmentPolicies.length > 0) {
            var arr1 = [];
            for (var n = 0; n < policyConfigs.fulfillmentPolicies.length; n++) {
                arr1.push(JSON.stringify(policyConfigs.fulfillmentPolicies[n]));
            }
            var str1 = '[' + arr1 + ']';
            g_form.setValue('fullfilment_policies', str1);
        }
        // if fulfillment policy is empty
        else {

            g_form.clearValue('fullfilment_policies');
        }


        if (adapterversion != "v3") {
            //map the discovery
            var resourceConfig = [];
            var resources = [];
            var enDiscovery = configOutput.featureConfigurations.configurationvalue.enableDiscovery;
            g_form.setValue('var_enable_common_discovery', enDiscovery); //INT-14416
            var discoveryConfigs = configOutput.featureConfigurations.discovery;
            if (discoveryConfigs.length > 0) {
                // g_form.setValue('var_enable_common_discovery', true);
                for (var r = 0; r < discoveryConfigs.length; r++) {

                    var discoveryConfig = discoveryConfigs[r].providerCode.toString();
                    resourceConfig.push(discoveryConfigs[r].resourceTypes);

                    //Azure
                    if (discoveryConfig == 'Azure') {
                        g_form.setValue('var_enable_discovery_azure', true);
                        for (var s = 0; s < resourceConfig[r].length; s++) {
                            resources.push(resourceConfig[r][s]);
                        }

                        var gr = new GlideAjax('fetchResourcesIds');
                        gr.addParam('sysparm_name', 'getResourceIds');
                        gr.addParam('sysparm_res', resources);
                        gr.getXML(setResValues);

                        function setResValues(response) {
                            answer = response.responseXML.documentElement.getAttribute("answer").split(',');
                            g_form.setValue('var_select_resource_types_azure', answer);
                        }

                    }

                    //GCP
                    if (discoveryConfig == 'GCP') {
                        g_form.setValue('var_enable_discovery_gcp', true);
                        for (var w = 0; w < resourceConfig[r].length; w++) {
                            resources.push(resourceConfig[r][w]);
                        }

                        var gr = new GlideAjax('fetchResourcesIds');
                        gr.addParam('sysparm_name', 'getResourceIdsGcp');
                        gr.addParam('sysparm_res', resources);
                        gr.getXML(setResValuesGcp);

                        function setResValuesGcp(response) {
                            answer = response.responseXML.documentElement.getAttribute("answer").split(',');
                            g_form.setValue('var_select_resource_types_gcp', answer);
                        }

                    }

                    if (discoveryConfig == 'VRA') {
                        g_form.setValue('var_enable_discovery_vra', true);
                        for (var g = 0; g < resourceConfig[r].length; g++) {
                            resources.push(resourceConfig[r][g]);
                        }

                        var grv = new GlideAjax('fetchResourcesIds');
                        grv.addParam('sysparm_name', 'getResourceIdsVra');
                        grv.addParam('sysparm_res', resources);
                        grv.getXML(setResValuesVra);

                        function setResValuesVra(response) {
                            answer = response.responseXML.documentElement.getAttribute("answer").split(',');
                            g_form.setValue('var_select_resource_types_vra', answer);
                        }

                    }



                    //AWS
                    if (discoveryConfig == 'AWS') {
                        g_form.setValue('var_enable_discovery_aws', true);
                        for (var m = 0; m < resourceConfig[r].length; m++) {
                            resources.push(resourceConfig[r][m]);
                        }

                        var grAws = new GlideAjax('fetchResourcesIds');
                        grAws.addParam('sysparm_name', 'getResourceIdsAws');
                        grAws.addParam('sysparm_res', resources);
                        grAws.getXML(setResValuesAws);

                        function setResValuesAws(response) {
                            answer = response.responseXML.documentElement.getAttribute("answer").split(',');
                            g_form.setValue('var_select_resource_types', answer);
                        }

                    }
                }
            } else {
                g_form.setValue('var_enable_common_discovery', false);
            }
        }

    }


}]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>debada54@in.ibm.com</sys_created_by>
        <sys_created_on>2020-11-19 07:16:15</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>59a21ccedbe0e8103b272649489619ac</sys_id>
        <sys_mod_count>385</sys_mod_count>
        <sys_name>Fetch Configurations from Emp</sys_name>
        <sys_overrides/>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>catalog_script_client_59a21ccedbe0e8103b272649489619ac</sys_update_name>
        <sys_updated_by>shalini.s11@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-03-25 12:28:41</sys_updated_on>
        <table/>
        <type>onChange</type>
        <ui_type>0</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
