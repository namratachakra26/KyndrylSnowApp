<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmg3_hcms.EmpConfigurationOutboundCall</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>/** &#13;
* @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. &#13;
* @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP &#13;
* Schedule Contract with Kyndryl Corp. &#13;
* @author Asha Bagade &#13;
* @Script Include is invoked from Workflow EMP Configuratin, this builds the payload for configuration (bootstrap) and sent to EMP&#13;
**/</description>
        <name>EmpConfigurationOutboundCall</name>
        <script><![CDATA[var EmpConfigurationOutboundCall = Class.create();

EmpConfigurationOutboundCall.prototype = {
    initialize: function() {},

    configJsonFile: function(current) {
        try {

            // To configure Service now properties based on user input
            var gr = new GlideRecord('sys_properties');
            if (gr.get('suffix', 'Enable_QuickStart')) {
                if (current.variables.quickstart == 'true') {
                    gr.value = true;
                } else {
                    gr.value = false;
                }
                gr.update();
            }
            //cart set to true all the time for v3 adapter
            if (gr.get('suffix', 'mvp3.cart.enabled')) {
                gr.value = true;
                gr.update();
            }
            if (gr.get('suffix', 'Outbound_Retry_Count')) {
                if (current.variables.number_retries_to_be_performed != '') {
                    var retryCount = current.variables.number_retries_to_be_performed;
                    gr.value = retryCount;
                } else {
                    gr.value = 3; // by default
                }
                gr.update();
            }

            if (gr.get('suffix', 'x_ibmg3_hcms.discovery.enabled')) {
                if (current.variables.discovery == 'true') {
                    gr.value = true;
                } else {
                    gr.value = false;
                }
                gr.update();
            }

            if (gr.get('suffix', 'allow.anonymous.user')) {
                if (current.variables.allow_anonymous_user == 'true') {
                    gr.value = true;
                } else {
                    gr.value = false;
                }
                gr.update();
            }

            var payloadbody = {};
            var featureConfigurationJson = {};
            var accountConfigurationJson = {};
            var policyConfigurationsjson = {};


            //build feature value json
            featureConfigurationJson._icb_instance_name = current.variables.mcmp_endpoint.toString();
            featureConfigurationJson._ci_integration_policy = {
                "enabled": true
            };
            featureConfigurationJson.approvalPolicySupport = {
                "multistep": JSON.parse(current.variables.multistep_approval.toString() || false),
                "enabled": true
            };
            //check if cart if enabled and decide the verison
            var version = gs.getProperty('x_ibmg3_hcms.mvp3.cart.enabled');
            if (version)
                version = "v2";
            else
                version = "v1";

            featureConfigurationJson.apiendpoints = {
                "sr_statechange": {
                    "resourcePath": "/api/x_ibmg3_hcms/" + version + "/broker/request/statechange",
                    "contentVersion": "v2"
                },
                "sr_create": {
                    "resourcePath": "/api/x_ibmg3_hcms/" + version + "/broker/request",
                    "contentVersion": "v2"
                },
                "update_change_task": {
                    "resourcePath": "/api/x_ibmg3_hcms/v1/broker/changetask",
                    "contentVersion": "v2"
                }
            };

            featureConfigurationJson._icb_instance_name = current.variables.mcmp_endpoint.toString();

            var versionIdentity = current.variables.adapterversion.toString();

            if (versionIdentity != 'v3') {
                featureConfigurationJson.discovery = [];

                if (current.variables.var_select_resource_types.getDisplayValue().toString() != "") {
                    featureConfigurationJson.discovery.push({

                        "providerCode": "AWS",
                        "resourceTypes": current.variables.var_select_resource_types.getDisplayValue().toString().replace(/\s*\,\s*/g, ",").trim().split(',')
                    });
                }


                if (current.variables.var_select_resource_types_azure.getDisplayValue().toString() != "") {
                    featureConfigurationJson.discovery.push({

                        "providerCode": "Azure",
                        "resourceTypes": current.variables.var_select_resource_types_azure.getDisplayValue().toString().replace(/\s*\,\s*/g, ",").trim().split(',')
                    });
                }

                if (current.variables.var_select_resource_types_gcp.getDisplayValue().toString() != "") {
                    featureConfigurationJson.discovery.push({

                        "providerCode": "GCP",
                        "resourceTypes": current.variables.var_select_resource_types_gcp.getDisplayValue().toString().replace(/\s*\,\s*/g, ",").trim().split(',')
                    });
                }

                if (current.variables.var_select_resource_types_vra.getDisplayValue().toString() != "") {
                    featureConfigurationJson.discovery.push({

                        "providerCode": "VRA",
                        "resourceTypes": current.variables.var_select_resource_types_vra.getDisplayValue().toString().replace(/\s*\,\s*/g, ",").trim().split(',')
                    });
                }

                featureConfigurationJson.enableDiscovery = JSON.parse(current.variables.var_enable_common_discovery.toString() || false);
                featureConfigurationJson.sslcerts = false;
                featureConfigurationJson.additionalDataSchema = JSON.parse(current.variables.additional_dataschema.toString());
                featureConfigurationJson.enableProvisioning = JSON.parse(current.variables.provisioningservicenow.toString() || false);
                featureConfigurationJson.encodeContext = JSON.parse(current.variables.encodeContext.toString() || false);
                featureConfigurationJson.preProvisionHook = "Enable";
                featureConfigurationJson.oAuthBasedAccess = "Disable";
                featureConfigurationJson.mvpVersion = "3";
            }


            featureConfigurationJson.domainSeparationEnabled = false;
            featureConfigurationJson.qsAuthProfile = current.variables.qs_auth_profile.getDisplayValue().toString();
            featureConfigurationJson.approvalWorkflow = current.variables.approval_workflow.getDisplayValue().toString();
            payloadbody.featureConfigurations = featureConfigurationJson;
            //fetch the credential details 
            var credential = current.variables.mcmp_api_credential.getDisplayValue().toString();
            featureConfigurationJson.credential = credential;
            //fetch communication mode
            var comMode = current.variables.communication_mode.toString().toUpperCase();
            featureConfigurationJson.communicationMode = comMode;
            // check if the version of the adapter is v2(old flow) or v3(new flow)
            featureConfigurationJson.adapterVersion = versionIdentity; //featureConfigurationJson.adapterVersion = "v2"; //current.variables.adapterversion.toString();
            featureConfigurationJson.consumeNamespace = current.variables.consume_namespace.toString();
            //fetch external context list
            if (current.variables.external_context_list.toString() != "") {
                var externalConvertContext = gs.base64Encode(current.variables.external_context_list.toString());
                featureConfigurationJson.externalcontextList = externalConvertContext;
            }

            //build account configuration json
            accountConfigurationJson.accountName = current.variables.account_name.toString();
            accountConfigurationJson.username = current.variables.account_user.getDisplayValue().toString();
            var password = gs.base64Encode(current.variables.password.toString());
            accountConfigurationJson.password = password;
            var urlSnow = gs.getProperty("glide.servlet.uri");
            var result = urlSnow.replace(/(^\w+:|^)\/\//, '');
            var newResult = result.replace(/\/$/, "");
            accountConfigurationJson.url = newResult;

            if (versionIdentity != 'v3') {
                var arrPurpose = [];
                if ((current.variables.ordertracking.toString()) != 'false') {
                    arrPurpose.push('ordertracking');
                }
                if ((current.variables.externalapproval.toString()) != 'false') {
                    arrPurpose.push('externalapproval');
                }
                if ((current.variables.inventory.toString()) != 'false') {
                    arrPurpose.push('Inventory');
                }
                if ((current.variables.external_context.toString()) != 'false') {
                    arrPurpose.push('external_context');
                }
                accountConfigurationJson.purpose = arrPurpose;
                accountConfigurationJson.context = [JSON.parse(current.variables.contexts.toString())];
            } else {
                accountConfigurationJson.accesstags = JSON.parse(current.variables.accesstags.toString());
            }

            //build policy config json
            if (current.variables.catalog_mapping_condition.toString() == "") {
                policyConfigurationsjson.catalogMappingPolicy = [];
            } else {
                var catalogMappingPolicyjson = current.variables.catalog_mapping_condition;
                var jsonmap = JSON.parse(catalogMappingPolicyjson);
                var mappingPolicy = JSON.stringify(jsonmap.configurationvalue.mappingpolicies);
                policyConfigurationsjson.catalogMappingPolicy = JSON.parse(mappingPolicy);
            }
            if (current.variables.fullfilment_policies.toString() == "") {
                policyConfigurationsjson.fulfillmentPolicies = [];
            } else
                policyConfigurationsjson.fulfillmentPolicies = JSON.parse(current.variables.fullfilment_policies.toString());
            payloadbody.featureConfigurations = featureConfigurationJson;
            payloadbody.accountConfigurations = accountConfigurationJson;
            payloadbody.policyConfigurations = policyConfigurationsjson;
            new HCMSLogLevel().LogMsg("info", "* EMP Configuration Wizard Json Payload for Request number  " + current.request.number + " : " + JSON.stringify(payloadbody));

            //Fetch the name of the rest method

            var url = current.variables.mcmp_endpoint.toString();
            //Define variables to hold response body and status code
            var responseBody, statusCode, endPoint = '';
            var req_domain = current.sys_domain.toString();
            //Invoke the below function to make an outbound call to emp for sending configurations
            if (versionIdentity != 'v3')
                var restMethodName = gs.getProperty('x_ibmg3_hcms.send_configuration');
            else
                restMethodName = gs.getProperty('x_ibmg3_hcms.send_v3_configuration');

            var outbndCall = this.outBoundRestCallToEmpInstance(restMethodName, credential, url, payloadbody, req_domain);

            if (outbndCall) {
                responseBody = outbndCall.responseBody;
                statusCode = outbndCall.statusCode;
                endPoint = outbndCall.endPoint;

            } else {
                new HCMSLogLevel().LogMsg("info", "* Invalid response from EMP for Configuration call *");
            }


            workflow.scratchpad.statuscode = statusCode; //store the status code in scratchpad to pass the value to EMP Configuration Workflow

            //only on successful response

            if (statusCode == '200' && versionIdentity != 'v3') {
                var parsedRes = JSON.parse(responseBody);
                var instance_state = parsedRes.instance.state;

                if (instance_state == 'completed') {

                    var msg = [];
                    var flMsg = [];

                    var comment = parsedRes.instance.result.DiscoveryResults.comments;
                    if (comment) {
                        if (comment.length > 0) {
                            for (var a = 0; a < comment.length; a++) {
                                msg.push(comment[a].message);
                            }
                            current.comments = "Common Discovery Registration Result:  \n" + msg.join("\n");
                        }
                    }



                    var fulPolicy = parsedRes.instance.result.registerFulfillmentPolicyOutput;
                    var policyFlg = "false";
                    if (fulPolicy) {
                        for (var f = 0; f < fulPolicy.length; f++) {
                            if (!fulPolicy[f].status) policyFlg = "true";
                        }
                        if (policyFlg == "true")
                            current.comments = "Fulfillment Policy Registration Output:  \nFulfillment policy validation failed. Please check the start date/end date, policy with same name already exists";

                    }
                } else if (instance_state == 'failed') {
                    workflow.scratchpad.statuscode = "fail"; // mark RITM closed incomplete
                    new HCMSLogLevel().LogMsg("info", "Response from EM is FAILED with connection error");
                } else if (instance_state == 'active') {
                    workflow.scratchpad.statuscode = "fail"; // mark RITM closed incomplete
                    current.comments = "Response from MarketPlace is not retreived even after 10 retries";
                }

            }

            new HCMSLogLevel().LogMsg("info", "Configuration " + versionIdentity + " setup Call Status Response from EM for Request number " + current.request.number + " : " + responseBody + " \nhttpStatus: " + statusCode + " \nEndPoint:" + endPoint);
        } catch (err) {
            new HCMSLogLevel().LogMsg("info", "Sending " + versionIdentity + " Configurations to Enterprise Marketplace error " + err);
        }
    },

    outBoundRestCallToEmp: function(restMethodName, credential, url, body, reqdomain) {
        try {
            var domainFlg = new Emp_Auth_Profile_Configuration().CheckDomainSeparation();
            var midserver_details, rm, userName, apiKey;
            //Fetch the name of the rest message name
            var restMessageName = gs.getProperty('x_ibmg3_hcms.outbound_calls.restmsg');
            //** Check the Outbound Call via MID Server Property is true / false
            var out_bound_flag = gs.getProperty('x_ibmg3_hcms.emp.outbound_calls.through.midserver');
            //** Outbound Call's using MID Server **// 

            var domain_enabled = new HCMSGetTenatDetails().QSCheckDS().toString();
            if (domain_enabled == 'true' && out_bound_flag == 'true') {
                midserver_details = gs.getProperty('x_ibmg3_hcms.emp.midserver.details').toString() + "-" + tenant[0];
            } else {
                midserver_details = gs.getProperty('x_ibmg3_hcms.emp.midserver.details').toString();
            }
            if (out_bound_flag == 'true') {
                rm = new sn_ws.RESTMessageV2(restMessageName, restMethodName);
                rm.setMIDServer(midserver_details);
                rm.setEccParameter("skip_sensor", "true");
            } else {
                rm = new sn_ws.RESTMessageV2(restMessageName, restMethodName);
            }
            rm.setRequestHeader("Content-Type", "application/json");
            rm.setRequestHeader("Accept", "Application/json");
            //Check if credentials are sent via payload else fetch from property
            if (!credential) {
                if (domainFlg == 'false')
                    credential = gs.getProperty('x_ibmg3_hcms.emp_api_key_credential');
                else
                    credential = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp_api_key_credential', reqdomain);
            }
            if (!url) {
                if (domainFlg == 'false')
                    url = gs.getProperty('x_ibmg3_hcms.emp.tenant.url');
                else
                    url = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp.tenant.url', reqdomain);
            }
            var version, system = '';
            if (domainFlg == 'false')
                version = gs.getProperty('x_ibmg3_hcms.AdapterVersionConfiguration');
            else
                version = GlideApplicationProperty.getValue('x_ibmg3_hcms.AdapterVersionConfiguration', reqdomain);

            //Fetch the username and apikey from credentials table
            var Customer_details_preProv = new HCMSGetTenatDetails().get_tenant_details(credential, reqdomain);
            if (Customer_details_preProv) {
                userName = Customer_details_preProv.UserName;
                apiKey = Customer_details_preProv.ApiKey;
                rm.setRequestHeader("Username", userName);
                rm.setRequestHeader("Apikey", apiKey);
            } else {
                new HCMSLogLevel().LogMsg("info", "* ApiKey and UserName are invalid *" + order_location);
            }

            if (version == 'v3') {
                //fetch v3auth token
                var authToken = new FetchV3AuthToken().getToken(restMessageName, url, apiKey, userName);
                new HCMSLogLevel().LogMsg("info", "*This is V3 authToken *" + authToken);
                var token = 'Bearer ' + authToken;
                rm.setRequestHeader("Authorization", token);
                url = url + '/consume';
            }
            //fetch the version and set the system accordingly
            if (version == 'v2' || version == 'v3') {
                system = 'snow';
                version = 'v2';
            } else {
                system = 'itsm';
                version = 'v4';
            }

            rm.setStringParameterNoEscape('url', url);
            rm.setStringParameterNoEscape('version', version);
            rm.setStringParameterNoEscape('system', system);

            //No body for GET api

            var strBody = JSON.stringify(body);
            if (strBody.toString().equals("{}")) {
                rm.setRequestBody(body);
            } else {
                rm.setRequestBody(strBody);
            }

            var endPoint = rm.getEndpoint();
            var api = endPoint.split('{url}');
            var adapterSystem = api[1].split('${system}');
            var adapterVersion = adapterSystem[1].split('${version}');
            endPoint = url + adapterSystem[0] + system + adapterVersion[0] + version + adapterVersion[1];
            rm.setLogLevel('Basic'); //LogLevel Basic
            //In milliseconds. Wait at most 30 seconds for response from http request.
            rm.setHttpTimeout(50000);
            var req_body = rm.getRequestBody();
            var response = rm.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            new HCMSLogLevel().LogMsg("info", "Response from EM " + responseBody + " \nhttpStatus: " + httpStatus + " \nEndPoint : " + endPoint);
            //return the response to calling function
            return {
                responseBody: responseBody,
                statusCode: httpStatus,
                endPoint: endPoint
            };
        } catch (err) {
            new HCMSLogLevel().LogMsg("info", "Sending outbound calls to Enterprise Marketplace error " + err);
        }
    },


    outBoundRestCallToEmpInstance: function(restMethodName, credential, url, body, reqdomain) {
        try {
            var domainFlg = new Emp_Auth_Profile_Configuration().CheckDomainSeparation();
            var midserver_details, rm;
            //Fetch the name of the rest message name
            var restMessageName = gs.getProperty('x_ibmg3_hcms.outbound_calls.restmsg');
            //** Check the Outbound Call via MID Server Property is true / false
            var out_bound_flag = gs.getProperty('x_ibmg3_hcms.emp.outbound_calls.through.midserver');
            //** Outbound Call's using MID Server **// 

            var domain_enabled = new HCMSGetTenatDetails().QSCheckDS().toString();
            if (domain_enabled == 'true' && out_bound_flag == 'true') {
                midserver_details = gs.getProperty('x_ibmg3_hcms.emp.midserver.details').toString() + "-" + tenant[0];
            } else {
                midserver_details = gs.getProperty('x_ibmg3_hcms.emp.midserver.details').toString();
            }
            if (out_bound_flag == 'true') {
                rm = new sn_ws.RESTMessageV2(restMessageName, restMethodName);
                rm.setMIDServer(midserver_details);
                rm.setEccParameter("skip_sensor", "true");
            } else {
                rm = new sn_ws.RESTMessageV2(restMessageName, restMethodName);
            }
            rm.setRequestHeader("Content-Type", "application/json");
            rm.setRequestHeader("Accept", "Application/json");
            //Check if credentials are sent via payload else fetch from property
            if (!credential) {
                if (domainFlg == 'false')
                    credential = gs.getProperty('x_ibmg3_hcms.emp_api_key_credential');
                else
                    credential = GlideApplicationProperty.getValue('x_ibmg3_hcms.emp_api_key_credential', reqdomain);
            }
            var version = '';
            if (domainFlg == 'false')
                version = gs.getProperty('x_ibmg3_hcms.AdapterVersionConfiguration');
            else
                version = GlideApplicationProperty.getValue('x_ibmg3_hcms.AdapterVersionConfiguration', reqdomain);

            //Fetch the username and apikey from credentials table
            var Customer_details_preProv = new HCMSGetTenatDetails().get_tenant_details(credential, reqdomain);
            if (Customer_details_preProv) {
                userName = Customer_details_preProv.UserName;
                apiKey = Customer_details_preProv.ApiKey;
                rm.setRequestHeader("Username", userName);
                rm.setRequestHeader("Apikey", apiKey);
            } else {
                new HCMSLogLevel().LogMsg("info", "* ApiKey and UserName are invalid *" + order_location);
            }
            if (version == 'v3') {
                new HCMSLogLevel().LogMsg("info", "* In V3 instance *");
                //fetch v3auth token
                var authToken = new FetchV3AuthToken().getToken(restMessageName, url, apiKey, userName);
                new HCMSLogLevel().LogMsg("info", "* This is V3 authToken instance *" + authToken);
                var token = 'Bearer ' + authToken;
                rm.setRequestHeader("Authorization", token);
                url = url + '/consume/provision';
            }
            rm.setStringParameterNoEscape('url', url);
            //rm.setStringParameterNoEscape('version', version); for future use
            //No body for GET api

            var strBody = JSON.stringify(body);
            if (strBody.toString().equals("{}")) {
                rm.setRequestBody(body);
            } else {
                rm.setRequestBody(strBody);
            }

            var endPoint = rm.getEndpoint();
            var api = endPoint.split('{url}');
            endPoint = url + api[1];
            rm.setLogLevel('Basic'); //LogLevel Basic
            //In milliseconds. Wait at most 30 seconds for response from http request.
            rm.setHttpTimeout(50000);
            var req_body = rm.getRequestBody();
            var response = rm.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            new HCMSLogLevel().LogMsg("info", "Response from Marketplace for " + version + " OutBoundRestCall  " + responseBody + " \nhttpStatus: " + httpStatus + " \nEndPoint : " + endPoint);

            if (httpStatus == '200' && version != "v3") {
                //INT-14295 - Fetch the status from Instance Id in post config call
                var resp = JSON.parse(responseBody);
                //var ins_state = resp.instance.state;
                var ins_id = resp.message.instanceId;
                var restMethodNameIns = gs.getProperty('x_ibmg3_hcms.fetch_default_configuration_instance'); //fetchDefaultConfigurationInstance	
                var respnse, i = 0;
                respnse = this.fetchInstanceState(restMessageName, restMethodNameIns, credential, reqdomain, url, body, ins_id);
                responseBody = respnse.getBody();

                var parsedRes = JSON.parse(responseBody);

                var ins_state = parsedRes.instance.state;
                while (ins_state == 'active') { // loop for 10 times(call api)	

                    if (i < 10) { //retry to hit api max 10 times
                        respnse = this.fetchInstanceState(restMessageName, restMethodNameIns, credential, reqdomain, url, body, ins_id);

                        responseBody = respnse.getBody();
                        httpStatus = respnse.getStatusCode();
                        parsedRes = JSON.parse(responseBody);
                        ins_state = parsedRes.instance.state;

                        //sleep 9 sec
                        if (ins_state == 'active') {
                            this.sleep(9000);
                            i++;
                        } else break;
                    } else {
                        new HCMSLogLevel().LogMsg("info", "Instance State is still in Active even after 10 retries");
                        break;
                    }
                }

            }
            //return the response to calling function
            return {
                responseBody: responseBody,
                statusCode: httpStatus,
                endPoint: endPoint
            };
        } catch (err) {
            new HCMSLogLevel().LogMsg("info", "Sending " + version + " outbound calls for Instance id to Enterprise Marketplace error " + err);
        }
    },


    fetchInstanceState: function(restMessageName, restMethodNameIns, credential, reqdomain, url, body, ins_id) {
        try {
            var rm1 = new sn_ws.RESTMessageV2(restMessageName, restMethodNameIns);
            rm1.setRequestHeader("Content-Type", "application/json");
            rm1.setRequestHeader("Accept", "Application/json");
            rm1.setStringParameterNoEscape('url', url);
            rm1.setStringParameterNoEscape('instanceId', ins_id);

            //Fetch the username and apikey from credentials table
            var Customer_details_preProv = new HCMSGetTenatDetails().get_tenant_details(credential, reqdomain);
            if (Customer_details_preProv) {
                rm1.setRequestHeader("Username", Customer_details_preProv.UserName);
                rm1.setRequestHeader("Apikey", Customer_details_preProv.ApiKey);
            } else {
                new HCMSLogLevel().LogMsg("info", "* ApiKey and UserName are invalid *" + order_location);
            }

            var strBody = JSON.stringify(body);
            if (strBody.toString().equals("{}")) {
                rm1.setRequestBody(body);
            } else {
                rm1.setRequestBody(strBody);
            }

            var endPoint = rm1.getEndpoint();
            var api = endPoint.split('{url}');
            endPoint = url + api[1];

            var te = endPoint.split('${instanceId}');
            endPoint = te[0] + ins_id + te[1]; //cascaded instance id

            rm1.setLogLevel('Basic'); //LogLevel Basic
            rm1.setHttpTimeout(20000); //In milliseconds. Wait at most 30 seconds for response from http request.
            var req_body = rm1.getRequestBody();
            var response = rm1.execute();
            var responseBody = response.getBody();
            var httpStatus = response.getStatusCode();
            new HCMSLogLevel().LogMsg("info", "Response from EM for Instance state" + responseBody + " \nhttpStatus: " + httpStatus + " \nEndPoint : " + endPoint);

            return response;

        } catch (err) {
            new HCMSLogLevel().LogMsg("info", "Sending outbound calls for InstanceId to Enterprise Marketplace error " + err);
        }

    },

    //sleep function for scoped application
    sleep: function(ms) {
        var endSleep = new GlideDuration().getNumericValue() + ms;
        while (new GlideDuration().getNumericValue() < endSleep) {
            //wait 
        }
        return;
    },

    type: 'EmpConfigurationOutboundCall'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>asbagad1@in.ibm.com</sys_created_by>
        <sys_created_on>2020-11-25 12:05:35</sys_created_on>
        <sys_id>2a6444c4db74e4102019d90d68961954</sys_id>
        <sys_mod_count>303</sys_mod_count>
        <sys_name>EmpConfigurationOutboundCall</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_script_include_2a6444c4db74e4102019d90d68961954</sys_update_name>
        <sys_updated_by>sreedhar.mamilla@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-03-26 06:36:19</sys_updated_on>
    </sys_script_include>
</record_update>
