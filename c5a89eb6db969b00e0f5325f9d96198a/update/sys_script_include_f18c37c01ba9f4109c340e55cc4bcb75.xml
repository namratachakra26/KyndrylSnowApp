<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmg3_hcms.Emp_CIWizMapper_Azure_CI_Configurations</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>/** &#13;
* @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. &#13;
* @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP &#13;
* Schedule Contract with Kyndryl Corp.  &#13;
* @author Shalini S &#13;
* @Script Include isused for Azure Cloud Resource Creation Script&#13;
**/</description>
        <name>Emp_CIWizMapper_Azure_CI_Configurations</name>
        <script><![CDATA[var Emp_CIWizMapper_Azure_CI_Configurations = Class.create();
Emp_CIWizMapper_Azure_CI_Configurations.prototype = {
    initialize: function() {},
//CD package
    createAzureVMCI: function(strBody) {
        try {
            new HCMSLogLevel().LogMsg('info', 'Incoming discovery asset for Azure vm payload' + strBody);

            var tagSet, orderNumber, InstanceId, name, manufacturer, InstanceState, statuses, category, uuid, os, os_version, object_id, vm_azure_parent_rec, az_img_version, az_offer, az_publisher, az_sku, az_version, platform, az_image_name, img_azure_rec_id, az_vm_size, az_vm_details_rec_id, az_datacenter_name, az_datacenter_region, az_datacenter_rec_id, az_network_interface_id, az_network_interface_rec_id, location, state, country, latitude, longitude, provider_resource_id, correlation_id, cpu, mac_address, coreCount, instance_type, dns_name, hostName, storage_vol_status, storage_volume, mount_point, ipaddress, subNetid, internet_facing, res_rec, availablity_zone, os_type, resource_grp_name, resource_grp_id, storage_account_type, az_disk_size, az_host_name, stack_Id, soi_id, tag_stack_name, tag_name;

            var inputJSON = JSON.parse(strBody);
            tagSet = inputJSON.gpd.tags;
            name = inputJSON.gpd.provider_resource_name;
            object_id = inputJSON.entity_id.toString();
            manufacturer = inputJSON.provider;
            az_img_version = inputJSON.gpd.raw_config_data.properties.storageProfile.imageReference.exactVersion;
            az_offer = inputJSON.gpd.raw_config_data.properties.storageProfile.imageReference.offer;
            az_publisher = inputJSON.gpd.raw_config_data.properties.storageProfile.imageReference.publisher;
            az_sku = inputJSON.gpd.raw_config_data.properties.storageProfile.imageReference.sku;
            az_version = inputJSON.gpd.raw_config_data.properties.storageProfile.imageReference.version;
            az_image_name = az_img_version + "/" + az_offer + "/" + az_publisher + "/" + az_sku + "/" + az_version;
            platform = inputJSON.gpd.raw_config_data.platform;
            az_vm_size = inputJSON.gpd.raw_config_data.properties.hardwareProfile.vmSize;
            az_datacenter_name = inputJSON.location.data_center;
            az_datacenter_region = inputJSON.location.data_center_id;
            az_network_interface_id = inputJSON.gpd.raw_config_data.properties.networkProfile.networkInterfaces;
            az_disk_size = inputJSON.gpd.raw_config_data.properties.storageProfile.osDisk.diskSizeGB;
            az_host_name = inputJSON.gpd.raw_config_data.properties.osProfile.computerName;
            location = inputJSON.location.location;
            state = inputJSON.location.state;
            country = inputJSON.location.country;
            latitude = inputJSON.location.latitude;
            longitude = inputJSON.location.longitude;
            uuid = inputJSON.uuid;
            manufacturer = inputJSON.provider;
            provider_resource_id = inputJSON.gpd.provider_resource_id;
            correlation_id = inputJSON.gpd.correlation_id;
            name = inputJSON.gpd.provider_resource_name;
            os_type = inputJSON.gpd.raw_config_data.properties.storageProfile.osDisk.osType;
            instance_type = inputJSON.gpd.raw_config_data.instanceType;
            dns_name = inputJSON.gpd.raw_config_data.dnsName;
            ipaddress = inputJSON.gpd.raw_config_data.ipAddress;
            availablity_zone = inputJSON.gpd.raw_config_data.name;
            statuses = inputJSON.gpd.raw_config_data.properties.instanceView.statuses;
            for (i = 0; i < statuses.length; i++) {
                if (statuses[i].displayStatus == 'Provisioning succeeded') InstanceState = 'on';
            }
            category = inputJSON.gpd.service_category;
            uuid = inputJSON.uuid;
            os = inputJSON.gpd.raw_config_data.properties.instanceView.osName;
            os_version = inputJSON.gpd.raw_config_data.properties.instanceView.osVersion;
            if (az_network_interface_id) {
                for (k = 0; k < inputJSON.gpd.raw_config_data.properties.networkProfile.networkInterfaces.length; k++) {
                    az_network_interface_id = inputJSON.gpd.raw_config_data.properties.networkProfile.networkInterfaces[k].id;
                }
            }

            //fetch the resource group name and resource group id 
            if (object_id) {
                var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(object_id);
            }
            if (availablity_zone) {
                var availablty_zone = new Emp_CIWizMapper().updateAvailabilityZoneCI(availablity_zone);
            }
            //create a VM record under Virtual Machines table (cmdb_ci_vm_instance)
            var azure_VM_CI = new GlideRecord('cmdb_ci_vm_instance');
            azure_VM_CI.initialize();
            azure_VM_CI.name = name;
            azure_VM_CI.state = InstanceState;
            azure_VM_CI.object_id = object_id;
            azure_VM_CI.cpus = '1';
            azure_VM_CI.disks = '1';
            azure_VM_CI.nics = '1';
            azure_VM_CI.correlation_id = correlation_id;
            vm_azure_parent_rec = azure_VM_CI.insert();

            // Create a record to store the virtual machines datacenter details
            var az_datacenter_details = new GlideRecord('cmdb_ci_azure_datacenter');
            az_datacenter_details.initialize();
            az_datacenter_details.name = az_datacenter_name;
            az_datacenter_details.region = az_datacenter_region;
            az_datacenter_rec_id = az_datacenter_details.insert();

            // Create a record to store the computer network interface details 
            var az_network_interface_details = new GlideRecord('cmdb_ci_nic');
            az_network_interface_details.addQuery('object_id', az_network_interface_id);
            az_network_interface_details.query();
            if (az_network_interface_details.next()) {
                az_network_interface_details.install_status = '1';
                az_network_interface_rec_id = az_network_interface_details.update();
            } else { //insert operation
                az_network_interface_details.initialize();
                az_network_interface_details.name = az_network_interface_id;
                az_network_interface_details.object_id = az_network_interface_id;
                az_network_interface_details.correlation_id = az_network_interface_id;
                az_network_interface_details.install_status = '1';
                az_network_interface_rec_id = az_network_interface_details.insert();
            }

            // Create a record to store the resource group details 
            var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
            resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
            resource_grp_rec.query();
            if (resource_grp_rec.next()) {
                resource_grp_rec.name = resource_grp_details.resGrpName;
                resource_grp_rec.object_id = resource_grp_details.resGrpID;
                resource_grp_rec.state = 'available';
                resource_grp_id = resource_grp_rec.update();
            } else {
                resource_grp_rec.initialize();
                resource_grp_rec.name = resource_grp_details.resGrpName;
                resource_grp_rec.object_id = resource_grp_details.resGrpID;
                resource_grp_rec.state = 'available';
                resource_grp_id = resource_grp_rec.insert();
            }

            // Create a record to store the Image reference details 
            var img_azure_rec = new GlideRecord('cmdb_ci_os_template');
            img_azure_rec.initialize();
            img_azure_rec.name = az_image_name;
            img_azure_rec.object_id = az_image_name;
            img_azure_rec.guest_os = os_type;
            img_azure_rec_id = img_azure_rec.insert();

            // Create a record to store the hardware detials of the azure virtual machine 
            var vm_details = new GlideRecord('cmdb_ci_compute_template');
            vm_details.initialize();
            vm_details.correlation_id = correlation_id;
            vm_details.object_id = az_vm_size;
            vm_details.vcpus = '1';
            az_vm_details_rec_id = vm_details.insert();

            switch (os_type) {
                case 'Windows':
                    var azureWindows = new GlideRecord('cmdb_ci_win_server');
                    azureWindows.initialize();
                    azureWindows.name = name;
                    azureWindows.manufacturer = manufacturer;
                    azureWindows.category = category; //'Hardware';
                    azureWindows.uuid = uuid;
                    azureWindows.os = os;
                    azureWindows.os_version = os_version;
                    azureWindows.chassis_type = 'Other';
                    azureWindows.install_status = InstanceState;
                    azureWindows.u_qs_cmdb_ci_managed_by = 'IBM';
                    azureWindows.manufacturer = manufacturer;
                    azureWindows.operational_status = InstanceState;
                    azureWindows.manufacturer = manufacturer;
                    azureWindows.comments = 'Azure Windows  Virtual Machine  ' + provider_resource_id;
                    azureWindows.u_qs_cmdb_ci_server_uuid = uuid; //Applicable only if Quickstart is Installed 
                    azureWindows.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
                    azureWindows.os = os_type;
                    azureWindows.disk_space = az_disk_size;
                    azureWindows.host_name = az_host_name;
                    azureWindows.mac_address = mac_address;
                    azureWindows.object_id = object_id;
                    azureWindows.correlation_id = correlation_id;
                    azureWindows.chassis_type = 'Other';
                    azureWindows.dns_domain = dns_name;
                    azureWindows.cpu_count = cpu;
                    azureWindows.cpu_core_count = coreCount;
                    azureWindows.ip_address = ipaddress;
                    azureWindows.internet_facing = internet_facing;
                    res_rec = azureWindows.insert();
                    break;

                case 'Linux':
                    var azureLinux = new GlideRecord('cmdb_ci_linux_server');
                    azureLinux.initialize();
                    azureLinux.name = name;
                    azureLinux.manufacturer = manufacturer;
                    azureLinux.category = category; // 'Hardware';
                    azureLinux.uuid = uuid;
                    azureLinux.os = os;
                    azureLinux.os_version = os_version;
                    azureLinux.chassis_type = 'Other';
                    azureLinux.install_status = InstanceState;
                    azureLinux.u_qs_cmdb_ci_managed_by = 'IBM';
                    azureLinux.manufacturer = manufacturer;
                    azureLinux.operational_status = InstanceState;
                    azureLinux.manufacturer = manufacturer;
                    azureLinux.comments = 'Azure Linux  Virtual Machine  ' + provider_resource_id;
                    azureLinux.u_qs_cmdb_ci_server_uuid = uuid; //Applicable only if Quickstart is Installed 
                    azureLinux.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
                    azureLinux.os = os_type;
                    azureLinux.disk_space = az_disk_size;
                    azureLinux.host_name = az_host_name;
                    azureLinux.mac_address = mac_address;
                    azureLinux.object_id = object_id;
                    azureLinux.correlation_id = correlation_id;
                    azureLinux.chassis_type = 'Other';
                    azureLinux.dns_domain = dns_name;
                    azureLinux.cpu_count = cpu;
                    azureLinux.cpu_core_count = coreCount;
                    azureLinux.ip_address = ipaddress;
                    azureLinux.internet_facing = internet_facing;
                    res_rec = azureLinux.insert();
                    break;
            }

            // Create a relationship with the datacenter and the Virtual Machine  as Hosted on relationship
            var datacenter_rel = new GlideRecord('cmdb_rel_ci');
            datacenter_rel.initialize();
            datacenter_rel.parent = vm_azure_parent_rec;
            datacenter_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Hosted', 'Hosts');
            datacenter_rel.child = az_datacenter_rec_id;
            datacenter_rel.insert();

            // Create a relationship with the resource group and the virtual machine
            var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
            resource_grp_rel.initialize();
            resource_grp_rel.parent = resource_grp_id;
            resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
            resource_grp_rel.child = vm_azure_parent_rec;
            resource_grp_rel.insert();

            // Create a relationship with the Virtual Machine and the Linux server record as CONTAINS relationship
            var vm_rel_ci = new GlideRecord('cmdb_rel_ci');
            vm_rel_ci.initialize();
            vm_rel_ci.parent = vm_azure_parent_rec;
            vm_rel_ci.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
            vm_rel_ci.child = res_rec;
            vm_rel_ci.insert();

            // Create a relationship with the Virtual Machine and the Aws Image record as PROVISIONED FROM relationship
            var img_rel_ci = new GlideRecord('cmdb_rel_ci');
            img_rel_ci.initialize();
            img_rel_ci.parent = vm_azure_parent_rec;
            img_rel_ci.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Provisioned From', 'Provisioned');
            img_rel_ci.child = img_azure_rec_id;
            img_rel_ci.insert();

            // Create a relationship with the Virtual Machine and the Storage Volume record as Use End Point From FROM TO relationship
            var storage_rel_ci = new GlideRecord('cmdb_rel_ci');
            storage_rel_ci.initialize();
            storage_rel_ci.parent = vm_azure_parent_rec;
            storage_rel_ci.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Use End Point To', 'Use End Point From');
            storage_rel_ci.child = az_network_interface_id;
            storage_rel_ci.insert();

            // Create a relationship with the Virtual Machine and the Hardware Instancerecord as Use End Point From FROM TO relationship
            var instance_rel_ci = new GlideRecord('cmdb_rel_ci');
            instance_rel_ci.initialize();
            instance_rel_ci.parent = vm_azure_parent_rec;
            instance_rel_ci.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Use End Point To', 'Use End Point From');
            instance_rel_ci.child = az_vm_details_rec_id;
            instance_rel_ci.insert();

            // Create a relationship with the Virtual Machine and the Virtual Netwotk Interface Instancerecord as Use End Point From FROM TO relationship
            var network_rel_ci = new GlideRecord('cmdb_rel_ci');
            network_rel_ci.initialize();
            network_rel_ci.parent = az_network_interface_rec_id;
            network_rel_ci.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Use End Point To', 'Use End Point From');
            network_rel_ci.child = vm_azure_parent_rec;
            network_rel_ci.insert();
			
			//soici linking with azure vm
			
			this.updateTagSoiciLink(tagSet, vm_azure_parent_rec); //Create tags if exist and soici link with record

            return res_rec;
        } catch (ex) {
            new HCMSLogLevel().LogMsg("info", "VM CI Creation v1 api - Error " + ex);
        }
    },

    createAzureLoadBalancerCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure LoadBalancer payload ' + strBody);
        var state, country, latitude, longitude, location;
        var lb_Json = JSON.parse(strBody);
        var lb_status = lb_Json.gpd.status;
        state = lb_Json.location.state;
        country = lb_Json.location.country;
        latitude = lb_Json.location.latitude;
        longitude = lb_Json.location.longitude;
        location = lb_Json.location.location;
        var tagSet = lb_Json.gpd.tags;
        var lb_data = new GlideRecord('cmdb_ci_cloud_load_balancer');
        lb_data.initialize();
        lb_data.name = lb_Json.gpd.provider_resource_name;
        if (lb_status == 'Active') {
            lb_data.install_status = '1';
            lb_data.operational_status = '1';
        } else {
            lb_data.install_status = '2';
            lb_data.operational_status = '2';
        }
        lb_data.object_id = lb_Json.entity_id;
        lb_data.correlation_id = lb_Json.gpd.correlation_id;
        lb_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        lb_data.ip_address = lb_Json.gpd.raw_config_data.properties.frontendIPConfigurations[0].properties.publicIPAddress.id;
        lb_data.attributes = lb_Json.gpd.raw_config_data;
        res_rec = lb_data.insert();
        if (lb_Json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(lb_Json.entity_id);
        }

        var network_ip_id = lb_Json.gpd.raw_config_data.properties.frontendIPConfigurations[0].properties.publicIPAddress;
        if (network_ip_id)
            var network_public_ip = this.getPublicIpAddress(network_ip_id.id);

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a Contains Relationship with the resource group and the load balancer ci wiith type as Contains Contained by
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Create a relationship with the LoadBalancer and the PublicIPaddress
        var pIA_rel = new GlideRecord('cmdb_rel_ci');
        pIA_rel.initialize();
        pIA_rel.parent = res_rec;
        pIA_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        pIA_rel.child = network_public_ip;
        pIA_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName

			this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },

    createAzureVaultsCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure Vault payload ' + strBody);
        var state, country, latitude, longitude, location;
        var vault_Json = JSON.parse(strBody);
        var vault_status = vault_Json.gpd.status;
        var vault_objectid = vault_Json.entity_id;
        var tagSet = vault_Json.gpd.tags;
        state = vault_Json.location.state;
        country = vault_Json.location.country;
        latitude = vault_Json.location.latitude;
        longitude = vault_Json.location.longitude;
        location = vault_Json.location.location;
        //fetch the resource group name and resource group id 
        if (vault_objectid) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(vault_objectid);
        }
        var id;
        var virtual_net = [];
        var virtual_network_id = vault_Json.gpd.raw_config_data.properties.networkAcls;
        if (virtual_network_id) {
            for (var j = 0; j < virtual_network_id.virtualNetworkRules.length; j++) {
                id = virtual_network_id.virtualNetworkRules[j].id;
                virtual_net.push(this.getVirtualNetwork(id));
            }
        }

        var vault_data = new GlideRecord('cmdb_ci_email_server_ent_vault');
        vault_data.initialize();
        vault_data.name = vault_Json.gpd.provider_resource_name;
        vault_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        if (vault_status == 'Succeeded' || vault_status == 'Active') {
            vault_data.install_status = '1';
            vault_data.operational_status = '1';
        } else {
            vault_data.install_status = '2';
            vault_data.operational_status = '2';
        }
        vault_data.short_description = vault_Json.entity_id;
        vault_data.correlation_id = vault_Json.gpd.correlation_id;
        res_rec = vault_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Create a relationship with the VN and the cosmoDB
        for (var i = 0; i < virtual_net.length; i++) {
            var virtualN_rel = new GlideRecord('cmdb_rel_ci');
            virtualN_rel.initialize();
            virtualN_rel.parent = res_rec;
            virtualN_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
            virtualN_rel.child = virtual_net[i];
            virtualN_rel.insert();
        }

         // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
			this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
		
        return res_rec;
    },


    createAzureRedisCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure Redis payload ' + strBody);
        var state, country, latitude, longitude, location;
        var redisJson = JSON.parse(strBody);
        var redis_status = redisJson.gpd.status;
        var redis_objectid = redisJson.entity_id;
        var tagSet = redisJson.gpd.tags;
        state = redisJson.location.state;
        country = redisJson.location.country;
        latitude = redisJson.location.latitude;
        longitude = redisJson.location.longitude;
        location = redisJson.location.location;

        //fetch the resource group name and resource group id 
        if (redis_objectid) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(redis_objectid);
        }

        var redis_data = new GlideRecord('cmdb_ci_cloud_database');
        redis_data.initialize();
        redis_data.name = redisJson.gpd.provider_resource_name;
        redis_data.version = redisJson.gpd.raw_config_data.properties.redisVersion;
        if (redis_status == 'Active') {
            redis_data.operational_status = '1';
            redis_data.install_status = '1';
        } else {
            redis_data.operational_status = '2';
            redis_data.install_status = '2';
        }
        redis_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        redis_data.fqdn = redisJson.gpd.raw_config_data.properties.hostName;
        redis_data.object_id = redisJson.entity_id;
        redis_data.type = redisJson.gpd.raw_config_data.type;
        redis_data.correlation_id = redisJson.gpd.correlation_id;
        redis_data.tcp_port = redisJson.gpd.raw_config_data.properties.port;
        res_rec = redis_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

		// Check if the SOI CI exists  with the corresponding serviceInstanceName

			this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },


    createAzureServerCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for the Micorsoft SQL Servers payload ' + strBody);
        var sername, serVersion, providerStatus, serverCorrelationID, serverObjectID, fully_qualifed_sername, serLocation, serverType, attributesVal, server_operational_status, server_res_rec, state, country, latitude, longitude, resource_grp_id, location;
        var serverJson = JSON.parse(strBody);
        sername = serverJson.gpd.provider_resource_name;
        serVersion = serverJson.gpd.raw_config_data.properties.version;
        providerStatus = serverJson.gpd.provider_status;
        serverCorrelationID = serverJson.gpd.correlation_id;
        serverObjectID = serverJson.entity_id;
        state = serverJson.location.state;
        country = serverJson.location.country;
        latitude = serverJson.location.latitude;
        longitude = serverJson.location.longitude;
        location = serverJson.location.location;
        fully_qualifed_sername = serverJson.gpd.raw_config_data.properties.fullyQualifiedDomainName;
        serLocation = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        serverType = serverJson.gpd.raw_config_data.type;
        attributesVal = serverJson.gpd.raw_config_data;
        var tagSet = serverJson.gpd.tags;
        var serverState = serverJson.gpd.raw_config_data.properties.userVisibleState;

        //fetch the resource group name and resource group id 
        if (serverObjectID) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(serverObjectID);
        }
        if (serverState == 'Ready') server_operational_status = '1';

        var server_data_rec = new GlideRecord('cmdb_ci_cloud_database');
        server_data_rec.initialize();
        server_data_rec.name = sername;
        server_data_rec.version = serVersion;
        server_data_rec.correlation_id = serverCorrelationID;
        server_data_rec.object_id = serverObjectID;
        server_data_rec.fqdn = fully_qualifed_sername;
        server_data_rec.location = serLocation;
        server_data_rec.type = serverType;
        server_data_rec.attributes = attributesVal;
        server_data_rec.operational_status = server_operational_status;
        server_res_rec = server_data_rec.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine		
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = server_res_rec;
        resource_grp_rel.insert();

        // Create a relationship between server database & servers
        var serVr = new GlideRecord('cmdb_ci_database');
        serVr.addEncodedQuery('correlation_idLIKE' + serverObjectID);
        serVr.query();
        while (serVr.next()) {
            var serVr_resource_rel = new GlideRecord('cmdb_rel_ci');
            serVr_resource_rel.addEncodedQuery('parent=' + serVr.sys_id + '^child=' + server_res_rec);
            serVr_resource_rel.query();
            if (!serVr_resource_rel.next()) {
                serVr_resource_rel.initialize();
                serVr_resource_rel.parent = serVr.sys_id;
                serVr_resource_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
                serVr_resource_rel.child = server_res_rec;
                serVr_resource_rel.insert();
            }
        }

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
			this.updateTagSoiciLink(tagSet, server_res_rec); //Create tags if exist and soici link with record
		
		
        return server_res_rec;
    },


    createAzureTrafficManagerCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', 'Incoming discovery asset for Azure Traffic Manager payload ' + strBody);
        var state, country, latitude, longitude, location;
        var trafficManager_Json = JSON.parse(strBody);
        var tf_status = trafficManager_Json.gpd.status;
        state = trafficManager_Json.location.state;
        country = trafficManager_Json.location.country;
        latitude = trafficManager_Json.location.latitude;
        longitude = trafficManager_Json.location.longitude;
        location = trafficManager_Json.location.location;
        var tf_opstatus = trafficManager_Json.gpd.provider_status;
        var tagSet = trafficManager_Json.gpd.tags;
        var tf_data = new GlideRecord('cmdb_ci_cloud_load_balancer');
        tf_data.initialize();
        tf_data.name = trafficManager_Json.gpd.provider_resource_name;

        if (trafficManager_Json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(trafficManager_Json.entity_id);
        }
        if (tf_opstatus == 'Enabled')
            tf_opstatus = '1';
        if (tf_status == 'Active') {
            tf_data.state = 'available';
        } else {
            tf_data.install_status = 'terminated';
        }
        tf_data.operational_status = tf_opstatus;
        tf_data.object_id = trafficManager_Json.entity_id;
        tf_data.correlation_id = trafficManager_Json.gpd.correlation_id;
        tf_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        tf_data.attributes = trafficManager_Json.gpd.raw_config_data;
        res_rec = tf_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName

			this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },


    createAzureServerDatabaseCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', 'Incoming discovery asset for Azure Server Database payload ' + strBody);

        var server_database_name, server_database_type, server_database_version, server_database_status, server_database_opstatus, server_database_serial_id, server_database_correlation_id, server_location, server_attributes, server_rec_id, state, country, latitude, longitude, location, server_category;

        var serverDatabaseJson = JSON.parse(strBody);
        server_database_name = serverDatabaseJson.gpd.provider_resource_name;
        server_database_type = 'Microsoft SQL Server';
        server_database_version = serverDatabaseJson.gpd.version;
        server_database_status = serverDatabaseJson.gpd.status;
        server_database_opstatus = serverDatabaseJson.gpd.provider_status;
        server_database_serial_id = serverDatabaseJson.gpd.databaseId;
        server_database_correlation_id = serverDatabaseJson.gpd.correlation_id;
        state = serverDatabaseJson.location.state;
        country = serverDatabaseJson.location.country;
        latitude = serverDatabaseJson.location.latitude;
        longitude = serverDatabaseJson.location.longitude;
        location = serverDatabaseJson.location.location;
        server_category = serverDatabaseJson.gpd.service_category;
        server_location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        server_attributes = serverDatabaseJson.gpd.raw_config_data;
        var tagSet = serverDatabaseJson.gpd.tags;
        //fetch the resource group name and resource group id 
        if (serverDatabaseJson.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(serverDatabaseJson.entity_id);
            var server_details = new Emp_CI_Creation_Validation_Script().getServerDetails(serverDatabaseJson.entity_id);
        }

        var server_rec = new GlideRecord('cmdb_ci_database');
        server_rec.initialize();
        server_rec.name = server_database_name;
        server_rec.type = server_database_type;
        server_rec.version = server_database_version;
        server_rec.install_status = server_database_status;
        server_rec.operational_status = server_database_opstatus;
        server_rec.correlation_id = server_database_correlation_id;
        server_rec.location = server_location;
        server_rec.attributes = server_attributes;
        server_rec.category = server_category;
        server_rec_id = server_rec.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the server database
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = server_rec_id;
        resource_grp_rel.insert();

        // Create a relationship between servers and server database
        var server_flag = new Emp_CI_Creation_Validation_Script().validateSeverExists(server_details);

        if (server_flag == 'true') {
            var serVr = new GlideRecord('cmdb_ci_cloud_database');
            serVr.get('name', server_details);
            serVr.query();
            if (serVr.next()) {
                var serVr_resource_rel = new GlideRecord('cmdb_rel_ci');
                serVr_resource_rel.initialize();
                serVr_resource_rel.parent = server_rec_id;
                serVr_resource_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
                serVr_resource_rel.child = serVr.sys_id;
                serVr_resource_rel.insert();
            }
        }

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
			this.updateTagSoiciLink(tagSet, server_rec_id); //Create tags if exist and soici link with record
		
		
        return server_rec_id;
    },


    createpublicIpAddressCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', 'Incoming discovery asset for Azure public Ip Address payload ' + strBody);

        var publicIpJson = JSON.parse(strBody);
        var ip_name, ip_address, ip_address_object_id, ip_status, ip_attributes, ip_correlation_id, ip_location, ip_rec_id, state, country, latitude, longitude, location;

        ip_name = publicIpJson.gpd.provider_resource_name;
        ip_address = publicIpJson.gpd.raw_config_data.properties.ipAddress;
        ip_address_object_id = publicIpJson.entity_id;
        ip_status = publicIpJson.gpd.provider_status;
        ip_correlation_id = publicIpJson.gpd.correlation_id;
        state = publicIpJson.location.state;
        country = publicIpJson.location.country;
        latitude = publicIpJson.location.latitude;
        longitude = publicIpJson.location.longitude;
        location = publicIpJson.location.location;
        ip_location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        //ip_attributes = JSON.stringify(publicIpJson.gpd.raw_config_data);
        var tagSet = publicIpJson.gpd.tags;
        if (ip_address_object_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(ip_address_object_id);
        }
        if (ip_status == 'Succeeded')
            ip_status = 'installed';
        var ip_rec = new GlideRecord('cmdb_ci_cloud_public_ipaddress');
        ip_rec.name = ip_name;
        ip_rec.public_ip_address = ip_address;
        ip_rec.object_id = ip_address_object_id;
        ip_rec.correlation_id = ip_correlation_id;
        ip_rec.location = ip_location;
        // ip_rec.attributes = ip_attributes;
        ip_rec.install_status = ip_status;
        ip_rec_id = ip_rec.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = ip_rec_id;
        resource_grp_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName

		this.updateTagSoiciLink(tagSet, ip_rec_id); //Create tags if exist and soici link with record
		
        return ip_rec_id;
    },

    createAzureNetworkInterfaceCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', 'Incoming discovery asset for Azure Network Interface payload ' + strBody);

        var networkJson = JSON.parse(strBody);
        var networkName, network_ipaddress, network_public_ip, network_ip_id, network_macaddress, network_opstatus, network_objectID, network_correlationID, network_location, network_privateIpAddress, network_attributes, network_interface_rec_id, state, country, latitude, longitude, location, virtual_network_id;

        networkName = networkJson.gpd.provider_resource_name;
        network_macaddress = networkJson.gpd.raw_config_data.properties.macAddress;
        network_opstatus = networkJson.gpd.provider_status.toString();
        network_objectID = networkJson.entity_id;
        network_correlationID = networkJson.gpd.correlation_id;
        state = networkJson.location.state;
        country = networkJson.location.country;
        latitude = networkJson.location.latitude;
        longitude = networkJson.location.longitude;
        location = networkJson.location.location;
        network_location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        network_privateIpAddress = networkJson.gpd.raw_config_data.properties.ipConfigurations[0].properties.privateIPAddress;
        network_attributes = networkJson.gpd.raw_config_data;
        network_ipaddress = networkJson.gpd.raw_config_data.properties.ipConfigurations[0].name;
        if (network_ipaddress == 'NotAvailable') network_ipaddress = networkJson.gpd.raw_config_data.properties.ipConfigurations[0].name;
        if (network_opstatus == 'Succeeded') network_opstatus = '1';
        var tagSet = networkJson.gpd.tags;
        network_ip_id = networkJson.gpd.raw_config_data.properties.ipConfigurations[0].properties.publicIPAddress;
        if (network_ip_id)
            network_public_ip = this.getPublicIpAddress(network_ip_id.id);
        virtual_network_id = networkJson.gpd.raw_config_data.properties.ipConfigurations[0].properties.subnet;
        if (virtual_network_id)
            var virtual_net = this.getVirtualNetwork(virtual_network_id.id);
        var nsg_id = networkJson.gpd.raw_config_data.properties.networkSecurityGroup;
        if (nsg_id)
            var nsg_id_rec = this.getNetworkSecurityGroup(nsg_id.id);
        if (network_objectID) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(network_objectID);
        }
        var network_Interface_rec = new GlideRecord('cmdb_ci_nic');
        network_Interface_rec.name = networkName;
        network_Interface_rec.ip_address = network_ipaddress;
        network_Interface_rec.mac_address = network_macaddress;
        network_Interface_rec.operational_status = network_opstatus;
        network_Interface_rec.object_id = network_objectID;
        network_Interface_rec.correlation_id = network_correlationID;
        network_Interface_rec.location = network_location;
        network_Interface_rec.private_ip = network_privateIpAddress;
        network_Interface_rec.attributes = network_attributes;
        network_interface_rec_id = network_Interface_rec.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the NI
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = network_interface_rec_id;
        resource_grp_rel.insert();

        // Create a relationship with the VN and the NI
        var virtualN_rel = new GlideRecord('cmdb_rel_ci');
        virtualN_rel.initialize();
        virtualN_rel.parent = network_interface_rec_id;
        virtualN_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        virtualN_rel.child = virtual_net;
        virtualN_rel.insert();

        // Create a relationship with the NI and the PublicIPaddress
        var pIA_rel = new GlideRecord('cmdb_rel_ci');
        pIA_rel.initialize();
        pIA_rel.parent = network_interface_rec_id;
        pIA_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        pIA_rel.child = network_public_ip;
        pIA_rel.insert();

        // Create a relationship with the NSG and the NI
        var nsg_rel = new GlideRecord('cmdb_rel_ci');
        nsg_rel.initialize();
        nsg_rel.parent = network_interface_rec_id;
        nsg_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        nsg_rel.child = nsg_id_rec;
        nsg_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, network_interface_rec_id); //Create tags if exist and soici link with record
		
		
        return network_interface_rec_id;
    },

    getPublicIpAddress: function(ip_id) {
        var public_ip = new GlideRecord('cmdb_ci_cloud_public_ipaddress');
        public_ip.addEncodedQuery('object_idSTARTSWITH' + ip_id);
        public_ip.query();
        if (public_ip.next()) {
            return public_ip.sys_id;
        }
        return 'NotAvailable';
    },

    getVirtualNetwork: function(virtual_id) {
        //var vN = virtual_id.split('/subnets');
        var virtual_address = new GlideRecord('cmdb_ci_cloud_subnet');
        virtual_address.addEncodedQuery('object_idSTARTSWITH' + virtual_id);
        virtual_address.query();
        if (virtual_address.next()) {
            return virtual_address.sys_id;
        }
        return 'NotAvailable';
    },

    getNetworkSecurityGroup: function(nsg_id) {
        var nsg_rec = new GlideRecord('cmdb_ci_compute_security_group');
        nsg_rec.addEncodedQuery('object_idSTARTSWITH' + nsg_id);
        nsg_rec.query();
        if (nsg_rec.next()) {
            return nsg_rec.sys_id;
        }
        return 'NotAvailable';
    },

    createAzureCosmosdbCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure Cosmos DB payload ' + strBody);
        var state, country, latitude, longitude, location;
        var cosmosJson = JSON.parse(strBody);
        var cosmos_status = cosmosJson.gpd.status;
        var tagSet = cosmosJson.gpd.tags;
        location = cosmosJson.location.location;
        state = cosmosJson.location.state;
        country = cosmosJson.location.country;
        latitude = cosmosJson.location.coordinates.latitude;
        longitude = cosmosJson.location.coordinates.longitude;
        var cosmosExt = cosmosJson.gpd.raw_config_data.properties.documentEndpoint;
        var myArr = cosmosExt.split("//");
        var reqArr = myArr[1].split(":");
        var reqPort = reqArr[1].split("/");
        var virtual_net = [];
        var virtual_network_id = cosmosJson.gpd.raw_config_data.properties.virtualNetworkRules;
        if (virtual_network_id) {
            for (var j = 0; j < virtual_network_id.length; j++) {
                virtual_net.push(this.getVirtualNetwork(virtual_network_id[j].id));
            }
        }

        //fetch the resource group name and resource group id 
        if (cosmosJson.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(cosmosJson.entity_id);
        }
        var cosmosdb_data = new GlideRecord('cmdb_ci_cloud_database');
        cosmosdb_data.initialize();
        cosmosdb_data.name = cosmosJson.gpd.provider_resource_name;
        //cosmosdb_data.version = cosmosJson.gpd.raw_config_data.properties.version;
        cosmosdb_data.version = cosmosJson.gpd.version;
        if (cosmos_status == 'Active') {
            cosmosdb_data.operational_status = '1';
            cosmosdb_data.install_status = '1';
        } else {
            cosmosdb_data.operational_status = '2';
            cosmosdb_data.install_status = '2';
        }
        cosmosdb_data.fqdn = reqArr[0]; //'mongodbcosmoscmdb.documents.azure.com';
        cosmosdb_data.object_id = cosmosJson.entity_id;
        cosmosdb_data.type = cosmosJson.gpd.raw_config_data.type;
        //cosmosdb_data.vendor = 'Microsoft'; // this property is not string
        cosmosdb_data.correlation_id = cosmosJson.gpd.correlation_id;
        cosmosdb_data.tcp_port = reqPort[0]; //'443';
        cosmosdb_data.dns_domain = cosmosJson.gpd.raw_config_data.properties.documentEndpoint;
        cosmosdb_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        //cosmosdb_data.attributes = cosmosJson.gpd.raw_config_data;
        res_rec = cosmosdb_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = '55c95bf6c0a8010e0118ec7056ebc54d';
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Create a relationship with the VN and the cosmoDB
        for (var i = 0; i < virtual_net.length; i++) {
            var virtualN_rel = new GlideRecord('cmdb_rel_ci');
            virtualN_rel.initialize();
            virtualN_rel.parent = res_rec;
            virtualN_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
            virtualN_rel.child = virtual_net[i];
            virtualN_rel.insert();
        }

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },


    // Map the Azure Virtual Network data with common discovery data 
    createVirtualNetwork: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure Virtual Network payload ' + strBody);

        var vpn_region, vpn_resource_region, vpn_datacenter, vpn_region_val_id, vpn_resource_grp, vpn_tagSet, resourceGroup, vpn_resource_grp_rec, vpn_cloud_subnet_rec, state, country, latitude, longitude, location;
        var inputJSON = JSON.parse(strBody);
        var tagSet = inputJSON.gpd.tags;
        var status = inputJSON.gpd.provider_status.toString();
        state = inputJSON.location.state;
        country = inputJSON.location.country;
        latitude = inputJSON.location.coordinates.latitude;
        longitude = inputJSON.location.coordinates.longitude;
        location = inputJSON.location.location;
        if (status == 'Succeeded') status = 'available';
        var operational_status = inputJSON.gpd.status.toString();
        if (operational_status == 'Active') operational_status = '1';
        if (inputJSON.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(inputJSON.entity_id);
        }
        vpn_datacenter = inputJSON.location.data_center.toString();
        vpn_region = inputJSON.location.location.toString();
        vpn_tagSet = inputJSON.gpd.tags;
        for (k = 0; k < vpn_tagSet.length; k++) {
            if (vpn_tagSet[k].Key == 'resourceGroup') resourceGroup = vpn_tagSet[k].Value;
        }
        // Create a datacenter for the virtual network
        if (vpn_datacenter) {
            vpn_resource_region = new GlideRecord('cmdb_ci_azure_datacenter');
            vpn_resource_region.initialize();
            vpn_resource_region.name = vpn_datacenter;
            vpn_resource_region.region = vpn_region;
            vpn_region_val_id = vpn_resource_region.insert();
        }

        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        var vpn_data = new GlideRecord('cmdb_ci_network');
        vpn_data.initialize();
        vpn_data.name = inputJSON.gpd.provider_resource_name;
        vpn_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        vpn_data.state = status;
        vpn_data.cidr = inputJSON.gpd.raw_config_data.properties.addressSpace.addressPrefixes.toString();
        vpn_data.object_id = inputJSON.entity_id;
        vpn_data.operational_status = operational_status;
        vpn_data.correlation_id = inputJSON.gpd.correlation_id;
        res_rec = vpn_data.insert();

        // Create a record in the subnet 
        var vpn_cloud_subnet = new GlideRecord('cmdb_ci_cloud_subnet');
        vpn_cloud_subnet.initialize();
        for (j = 0; j < inputJSON.gpd.raw_config_data.properties.subnets.length; j++) {
            vpn_cloud_subnet.name = inputJSON.gpd.raw_config_data.properties.subnets[j].name;
            vpn_cloud_subnet.object_id = inputJSON.gpd.raw_config_data.properties.subnets[j].id;
            vpn_cloud_subnet.correlation_id = inputJSON.gpd.correlation_id; //map correlationID
            vpn_cloud_subnet.operational_status = operational_status;
            vpn_cloud_subnet_rec = vpn_cloud_subnet.insert();

            // Create a relationship between the cloud subnets and the virtual private networks			
            var vpn_subnet_rel = new GlideRecord('cmdb_rel_ci');
            vpn_subnet_rel.initialize();
            vpn_subnet_rel.parent = res_rec;
            vpn_subnet_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
            vpn_subnet_rel.child = vpn_cloud_subnet_rec;
            vpn_subnet_rel.insert();
        }

        // Create a relationship between the datacenter and virtual private network with type as Hosted Hosts
        var vpn_rel_ci = new GlideRecord('cmdb_rel_ci');
        vpn_rel_ci.initialize();
        vpn_rel_ci.parent = res_rec;
        vpn_rel_ci.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Hosted', 'Hosts');
        vpn_rel_ci.child = vpn_region_val_id;
        vpn_rel_ci.insert();

        // Create a relationship between the virtual Network and resource group
        var vpn_resource_rel = new GlideRecord('cmdb_rel_ci');
        vpn_resource_rel.initialize();
        vpn_resource_rel.parent = resource_grp_id; // vpn_resource_grp_rec;
        vpn_resource_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        vpn_resource_rel.child = res_rec;
        vpn_resource_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
		
        return res_rec;
    },

    createAzureDnsZonerCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for DNS Zone & Private DNS Zone payload ' + strBody);
        var res_rec, state, country, latitude, longitude, location;
        var dns_json = JSON.parse(strBody);
        var tagSet = dns_json.gpd.tags;
        if (dns_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(dns_json.entity_id);
        }
        state = dns_json.location.state;
        country = dns_json.location.country;
        latitude = dns_json.location.latitude;
        longitude = dns_json.location.longitude;
        location = dns_json.location.location;
        var dns_rec = new GlideRecord('cmdb_ci_dns_name');
        dns_rec.initialize();
        dns_rec.name = dns_json.gpd.provider_resource_name;
        dns_rec.correlation_id = dns_json.gpd.correlation_id;
        dns_rec.short_description = dns_json.entity_id;
        dns_rec.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        var operational_status = dns_json.gpd.status.toString();
        if (operational_status == 'Active') {
            dns_rec.operational_status = '1';
        } else {
            dns_rec.operational_status = '2';
        }
        dns_rec.discovery_source = 'MCMP';
        res_rec = dns_rec.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },

    createAzureVirtualMachinesScaleCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for virtual Machines payload ' + strBody);

        var vms_name, vms_object_id, vms_correlation_id, vms_discovery_source, vms_location, vms_operational_status, vms_attributes, vms_rec_id, state, country, latitude, longitude, location;
        var vms_json = JSON.parse(strBody);
        var tagSet = vms_json.gpd.tags;
        vms_name = vms_json.gpd.provider_resource_name;
        vms_object_id = vms_json.entity_id;
        vms_correlation_id = vms_json.gpd.correlation_id;
        vms_discovery_source = 'MCMP';
        state = vms_json.location.state;
        country = vms_json.location.country;
        latitude = vms_json.location.latitude;
        longitude = vms_json.location.longitude;
        location = vms_json.location.location;
        vms_location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        vms_operational_status = vms_json.gpd.provider_status.toString();
        vms_attributes = vms_json.gpd.raw_config_data;

        var virtual_network_id = vms_json.gpd.raw_config_data.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[0].properties.ipConfigurations[0].properties.subnet;
        if (virtual_network_id)
            var virtual_net = this.getVirtualNetwork(virtual_network_id.id);

        var nsg = vms_json.gpd.raw_config_data.properties.virtualMachineProfile.networkProfile.networkInterfaceConfigurations[0].properties.networkSecurityGroup;
        if (nsg)
            var nsg_id = this.getNetworkSecurityGroup(nsg.id);
        if (vms_object_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(vms_object_id);
        }
        if (vms_operational_status == 'Succeeded')
            vms_operational_status = '1';

        var vms_rec = new GlideRecord('cmdb_ci_sa_server_array');
        vms_rec.name = vms_name;
        vms_rec.object_id = vms_object_id;
        vms_rec.correlation_id = vms_correlation_id;
        vms_rec.discovery_source = vms_discovery_source;
        vms_rec.location = vms_location;
        vms_rec.operational_status = vms_operational_status;
        vms_rec.attributes = vms_attributes;
        vms_rec_id = vms_rec.insert();


        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = vms_rec_id;
        resource_grp_rel.insert();

        // Create a relationship with the NSG and the NI
        var nsg_rel = new GlideRecord('cmdb_rel_ci');
        nsg_rel.initialize();
        nsg_rel.parent = vms_rec_id;
        nsg_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        nsg_rel.child = nsg_id;
        nsg_rel.insert();

        // Create a relationship with the VN and the VMsacleset
        var virtualN_rel = new GlideRecord('cmdb_rel_ci');
        virtualN_rel.initialize();
        virtualN_rel.parent = vms_rec_id;
        virtualN_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        virtualN_rel.child = virtual_net;
        virtualN_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, vms_rec_id); //Create tags if exist and soici link with record
		
        return vms_rec_id;
    },

    createAzureManagedClustersCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for ManagedClusters payload ' + strBody);

        var res_rec, state, country, latitude, longitude, location;
        var mCluster_json = JSON.parse(strBody);
        var tagSet = mCluster_json.gpd.tags;
        if (mCluster_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(mCluster_json.entity_id);
        }
        state = mCluster_json.location.state;
        country = mCluster_json.location.country;
        latitude = mCluster_json.location.latitude;
        longitude = mCluster_json.location.longitude;
        location = mCluster_json.location.location;
        var mCluster_rec = new GlideRecord('cmdb_ci_kubernetes_service');
        mCluster_rec.initialize();
        mCluster_rec.name = mCluster_json.gpd.provider_resource_name;
        mCluster_rec.k8s_uid = mCluster_json.entity_id;
        mCluster_rec.correlation_id = mCluster_json.gpd.correlation_id;
        mCluster_rec.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        var operational_status = mCluster_json.gpd.provider_status.toString();
        if (operational_status == 'Succeeded') {
            mCluster_rec.operational_status = '1';
        } else {
            mCluster_rec.operational_status = '2';
        }
        mCluster_rec.attributes = mCluster_json.gpd.raw_config_data;
        mCluster_rec.discovery_source = 'MCMP';
        mCluster_rec.fqdn = mCluster_json.gpd.raw_config_data.properties.fqdn;
        res_rec = mCluster_rec.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName

		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },

    createAzureAppServiceCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure App Service Plan payload ' + strBody);
        var res_rec, state, country, latitude, longitude, location;
        var appService_json = JSON.parse(strBody);
        var tagSet = appService_json.gpd.tags;
        state = appService_json.location.state;
        country = appService_json.location.country;
        latitude = appService_json.location.latitude;
        longitude = appService_json.location.longitude;
        location = appService_json.location.location;
        if (appService_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(appService_json.entity_id);
        }
        var appService_rec = new GlideRecord('cmdb_ci_appl');
        appService_rec.initialize();
        appService_rec.name = appService_json.gpd.provider_resource_name;
        appService_rec.short_description = appService_json.entity_id;
        appService_rec.correlation_id = appService_json.gpd.correlation_id;
        appService_rec.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        var operational_status = appService_json.gpd.provider_status.toString();
        if (operational_status == 'Running') {
            appService_rec.operational_status = '1';
        } else {
            appService_rec.operational_status = '2';
        }
        appService_rec.discovery_source = 'MCMP';
        res_rec = appService_rec.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
		
        return res_rec;
    },

    createAzureVNGatewayCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure Virtual Network Gateway payload ' + strBody);
        var state, country, latitude, longitude, location;
        var vnGway_json = JSON.parse(strBody);
        state = vnGway_json.location.state;
        country = vnGway_json.location.country;
        latitude = vnGway_json.location.latitude;
        longitude = vnGway_json.location.longitude;
        location = vnGway_json.location.location;
        var vnGway_status = vnGway_json.gpd.provider_status;
        var tagSet = vnGway_json.gpd.tags;
        if (vnGway_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(vnGway_json.entity_id);
        }
        var vnGway_data = new GlideRecord('cmdb_ci_endpoint_vpg');
        vnGway_data.initialize();
        vnGway_data.name = vnGway_json.gpd.provider_resource_name;
        if (vnGway_status == 'Succeeded') {
            vnGway_data.operational_status = '1';
        } else {
            vnGway_data.operational_status = '2';
        }
        vnGway_data.object_id = vnGway_json.entity_id;
        vnGway_data.correlation_id = vnGway_json.gpd.correlation_id;
        vnGway_data.attributes = vnGway_json.gpd.raw_config_data;
        vnGway_data.type = vnGway_json.gpd.provider_resource_type;
        vnGway_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        vnGway_data.virtual_pvt_gateway_id = vnGway_json.gpd.raw_config_data.id;
        res_rec = vnGway_data.insert();
        var pip = vnGway_json.gpd.raw_config_data.properties.ipConfigurations[0].properties.publicIPAddress;
        if (pip)
            var pip_id = this.getPublicIpAddress(pip.id);
        var virtual_network_id = vnGway_json.gpd.raw_config_data.properties.ipConfigurations[0].properties.subnet;
        if (virtual_network_id)
            var virtual_net = this.getVirtualNetwork(virtual_network_id.id);

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Create a relationship with the PIP and the VNG
        var pip_ids = new GlideRecord('cmdb_rel_ci');
        pip_ids.initialize();
        pip_ids.parent = res_rec;
        pip_ids.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        pip_ids.child = pip_id;
        pip_ids.insert();

        // Create a relationship with the VN and the VNG
        var virtualN_rel = new GlideRecord('cmdb_rel_ci');
        virtualN_rel.initialize();
        virtualN_rel.parent = res_rec;
        virtualN_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        virtualN_rel.child = virtual_net;
        virtualN_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },

    createAzureApplicationGatewayCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure Virtual Application Gateway payload ' + strBody);
        var state, country, latitude, longitude, location;
        var vnAppGway_json = JSON.parse(strBody);
        state = vnAppGway_json.location.state;
        country = vnAppGway_json.location.country;
        latitude = vnAppGway_json.location.latitude;
        longitude = vnAppGway_json.location.longitude;
        location = vnAppGway_json.location.location;
        var tagSet = vnAppGway_json.gpd.tags;
        var vnGway_status = vnAppGway_json.gpd.provider_status;
        if (vnAppGway_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(vnAppGway_json.entity_id);
        }
        var vnAppGway_data = new GlideRecord('cmdb_ci_cloud_gateway');
        vnAppGway_data.initialize();
        vnAppGway_data.name = vnAppGway_json.gpd.provider_resource_name;
        if (vnGway_status == 'Succeeded') {
            vnAppGway_data.operational_status = '1';
        } else {
            vnAppGway_data.operational_status = '2';
        }
        vnAppGway_data.correlation_id = vnAppGway_json.gpd.correlation_id;
        vnAppGway_data.attributes = vnAppGway_json.gpd.raw_config_data;
        vnAppGway_data.version = vnAppGway_json.gpd.version;
        vnAppGway_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        vnAppGway_data.object_id = vnAppGway_json.entity_id;
        res_rec = vnAppGway_data.insert();

        var virtual_network_id = vnAppGway_json.gpd.raw_config_data.properties.gatewayIPConfigurations[0].properties.subnet;
        if (virtual_network_id)
            var virtual_net = this.getVirtualNetwork(virtual_network_id.id);

        var network_ip_id = vnAppGway_json.gpd.raw_config_data.properties.frontendIPConfigurations[0].properties.publicIPAddress;
        if (network_ip_id)
            var network_public_ip = this.getPublicIpAddress(network_ip_id.id);

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Create a relationship with the AG and the PublicIPaddress
        var pIA_rel = new GlideRecord('cmdb_rel_ci');
        pIA_rel.initialize();
        pIA_rel.parent = res_rec;
        pIA_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        pIA_rel.child = network_public_ip;
        pIA_rel.insert();

        // Create a relationship with the VN and the AG
        var virtualN_rel = new GlideRecord('cmdb_rel_ci');
        virtualN_rel.initialize();
        virtualN_rel.parent = res_rec;
        virtualN_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        virtualN_rel.child = virtual_net;
        virtualN_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
		
        return res_rec;
    },

    createBatchAccountsCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure BatchAccounts payload ' + strBody);
        var state, country, latitude, longitude, location;
        var batchAcc_json = JSON.parse(strBody);
        state = batchAcc_json.location.state;
        country = batchAcc_json.location.country;
        latitude = batchAcc_json.location.latitude;
        longitude = batchAcc_json.location.longitude;
        location = batchAcc_json.location.location;
        var tagSet = batchAcc_json.gpd.tags;
        var batchAcc_status = batchAcc_json.gpd.provider_status;
        if (batchAcc_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(batchAcc_json.entity_id);
        }
        var batchAcc_data = new GlideRecord('cmdb_ci_batch_job');
        batchAcc_data.initialize();
        batchAcc_data.name = batchAcc_json.gpd.provider_resource_name;
        if (batchAcc_status == 'Succeeded') {
            batchAcc_data.operational_status = '1';
        } else {
            batchAcc_data.operational_status = '2';
        }
        batchAcc_data.category = batchAcc_json.gpd.service_category;
        batchAcc_data.short_description = batchAcc_json.entity_id;
        batchAcc_data.correlation_id = batchAcc_json.gpd.correlation_id;
        batchAcc_data.attributes = JSON.stringify(batchAcc_json.gpd.raw_config_data);
        batchAcc_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        batchAcc_data.discovery_source = 'MCMP';
        res_rec = batchAcc_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

         // Check if the SOI CI exists  with the corresponding serviceInstanceName
	
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },


    createAzureStorageCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure StorageAccounts payload ' + strBody);
        var state, country, latitude, longitude, location;
        var storage_JSON = JSON.parse(strBody);
        var tagSet = storage_JSON.gpd.tags;
        var storageAcc_status = storage_JSON.gpd.provider_status;
        state = storage_JSON.location.state;
        country = storage_JSON.location.country;
        latitude = storage_JSON.location.latitude;
        longitude = storage_JSON.location.longitude;
        location = storage_JSON.location.location;
        if (storage_JSON.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(storage_JSON.entity_id);
        }
        var virtual_net = [];
        var virtual_network_id = storage_JSON.gpd.raw_config_data.properties.networkAcls.virtualNetworkRules;
        if (virtual_network_id) {
            for (var j = 0; j < virtual_network_id.length; j++) {
                virtual_net.push(this.getVirtualNetwork(virtual_network_id[j].id));
            }
        }

        var storageAcc_data = new GlideRecord('cmdb_ci_cloud_storage_account');
        storageAcc_data.initialize();
        storageAcc_data.name = storage_JSON.gpd.provider_resource_name;
        if (storageAcc_status == 'Succeeded') {
            storageAcc_status.operational_status = '1';
        } else {
            storageAcc_data.operational_status = '2';
        }
        storageAcc_data.object_id = storage_JSON.entity_id;
        storageAcc_data.category = storage_JSON.gpd.service_category;
        storageAcc_data.correlation_id = storage_JSON.gpd.correlation_id;
        //storageAcc_data.attributes = storage_JSON.gpd.raw_config_data;
        storageAcc_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        storageAcc_data.discovery_source = 'MCMP';
        res_rec = storageAcc_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Create a relationship with the VN and the cosmoDB
        for (var i = 0; i < virtual_net.length; i++) {
            var virtualN_rel = new GlideRecord('cmdb_rel_ci');
            virtualN_rel.initialize();
            virtualN_rel.parent = res_rec;
            virtualN_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
            virtualN_rel.child = virtual_net[i];
            virtualN_rel.insert();
        }

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },

    createBackupItemCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure backupProtectedItems payload ' + strBody);
        var state, country, latitude, longitude, location;
        var backupItem_json = JSON.parse(strBody);
        var tagSet = backupItem_json.gpd.tags;
        state = backupItem_json.location.state;
        country = backupItem_json.location.country;
        latitude = backupItem_json.location.latitude;
        longitude = backupItem_json.location.longitude;
        location = backupItem_json.location.location;
        var backupItem_status = backupItem_json.gpd.provider_status;
        if (backupItem_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(backupItem_json.entity_id);
        }
        var backupItem_data = new GlideRecord('cmdb_ci_remote_backup_template');
        backupItem_data.initialize();
        backupItem_data.name = backupItem_json.gpd.provider_resource_name;
        if (backupItem_status == 'Protected') { //succeded
            backupItem_data.operational_status = '1';
        } else {
            backupItem_data.operational_status = '2';
        }
        backupItem_data.object_id = backupItem_json.entity_id;
        backupItem_data.correlation_id = backupItem_json.gpd.correlation_id;
        backupItem_data.attributes = backupItem_json.gpd.raw_config_data;
        backupItem_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        backupItem_data.discovery_source = 'MCMP';
        res_rec = backupItem_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = '55c95bf6c0a8010e0118ec7056ebc54d';
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName

		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
		
        return res_rec;
    },

    createManagedInstancesCI: function(strBody) {
        var state, country, latitude, longitude, location, virtual_network_id;
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure SQL ManagedInstances payload ' + strBody);
        var mi_json = JSON.parse(strBody);
        var tagSet = mi_json.gpd.tags;
        state = mi_json.location.state;
        country = mi_json.location.country;
        latitude = mi_json.location.latitude;
        longitude = mi_json.location.longitude;
        location = mi_json.location.location;
        var mi_status = mi_json.gpd.provider_status;
        if (mi_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(mi_json.entity_id);
        }
        virtual_network_id = mi_json.gpd.raw_config_data.properties.subnetId;
        if (virtual_network_id)
            var virtual_net = this.getVirtualNetwork(virtual_network_id);

        var mi_data = new GlideRecord('cmdb_ci_cloud_database');
        mi_data.initialize();
        mi_data.name = mi_json.gpd.provider_resource_name;
        if (mi_status == 'Succeeded' || mi_status == 'Ready') {
            mi_data.operational_status = '1';
        } else {
            mi_data.operational_status = '2';
        }
        mi_data.object_id = mi_json.entity_id;
        mi_data.version = mi_json.gpd.version;
        mi_data.correlation_id = mi_json.gpd.correlation_id;
        mi_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        mi_data.type = mi_json.gpd.raw_config_data.type;
        res_rec = mi_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Create a relationship with the VN and the NI
        var virtualN_rel = new GlideRecord('cmdb_rel_ci');
        virtualN_rel.initialize();
        virtualN_rel.parent = res_rec;
        virtualN_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        virtualN_rel.child = virtual_net;
        virtualN_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName

		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
		
        return res_rec;
    },

    createAzureExpressRouteCI: function(strBody) {
        var state, country, latitude, longitude, location;
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for Azure Express Route Circuits payload ' + strBody);
        var expC_json = JSON.parse(strBody);
        var tagSet = expC_json.gpd.tags;
        state = expC_json.location.state;
        country = expC_json.location.country;
        latitude = expC_json.location.latitude;
        longitude = expC_json.location.longitude;
        location = expC_json.location.location;
        var expC_status = expC_json.gpd.provider_status;
        if (expC_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(expC_json.entity_id);
        }
        var expC_data = new GlideRecord('cmdb_ci_endpoint_vpg');
        expC_data.initialize();
        expC_data.name = expC_json.gpd.provider_resource_name;
        expC_data.correlation_id = expC_json.gpd.correlation_id;
        expC_data.discovery_source = 'MCMP';
        expC_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        if (expC_status == 'Succeeded') {
            expC_data.operational_status = '1';
        } else {
            expC_data.operational_status = '2';
        }
        expC_data.attributes = expC_json.gpd.raw_config_data;
        expC_data.object_id = expC_json.entity_id;
        res_rec = expC_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
		
        return res_rec;
    },

    createContainerStorageCI: function(strBody) {
        new HCMSLogLevel().LogMsg('info', ' Incoming discovery asset for ContainerStorage payload ' + strBody);
        var state, country, latitude, longitude, location;
        var cStorage_json = JSON.parse(strBody);
        var tagSet = cStorage_json.gpd.tags;
        state = cStorage_json.location.state;
        country = cStorage_json.location.country;
        latitude = cStorage_json.location.latitude;
        longitude = cStorage_json.location.longitude;
        location = cStorage_json.location.location;
        var cStorage_status = cStorage_json.gpd.provider_status;
        var sAccount = cStorage_json.gpd.raw_config_data.id;
        if (sAccount)
            var sA_id = this.getstorageAccount(sAccount);
        if (cStorage_json.entity_id) {
            var resource_grp_details = new Emp_CI_Creation_Validation_Script().getResourceGrpDetails(cStorage_json.entity_id);
        }
        var cStorage_data = new GlideRecord('cmdb_ci_storage_container');
        cStorage_data.initialize();
        cStorage_data.name = cStorage_json.gpd.provider_resource_name;
        if (cStorage_status == 'Available') {
            cStorage_data.operational_status = '1';
        } else {
            cStorage_data.operational_status = '2';
        }
        cStorage_data.object_id = cStorage_json.entity_id;
        cStorage_data.category = cStorage_json.gpd.service_category;
        cStorage_data.correlation_id = cStorage_json.gpd.correlation_id;
        cStorage_data.location = new Emp_CIWizMapper().updateResourceLocation(location, state, country, latitude, longitude);
        cStorage_data.type = cStorage_json.gpd.raw_config_data.type;
        cStorage_data.discovery_source = 'MCMP';
        res_rec = cStorage_data.insert();

        // Create a record to store the resource group details 
        var resource_grp_rec = new GlideRecord('cmdb_ci_resource_group');
        resource_grp_rec.addEncodedQuery('object_idSTARTSWITH' + resource_grp_details.resGrpID);
        resource_grp_rec.query();
        if (resource_grp_rec.next()) {
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.update();
        } else {
            resource_grp_rec.initialize();
            resource_grp_rec.name = resource_grp_details.resGrpName;
            resource_grp_rec.object_id = resource_grp_details.resGrpID;
            resource_grp_rec.state = 'available';
            resource_grp_id = resource_grp_rec.insert();
        }

        // Create a relationship with the resource group and the virtual machine
        var resource_grp_rel = new GlideRecord('cmdb_rel_ci');
        resource_grp_rel.initialize();
        resource_grp_rel.parent = resource_grp_id;
        resource_grp_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        resource_grp_rel.child = res_rec;
        resource_grp_rel.insert();

        // Create a relationship with the VN and the NI
        var virtualN_rel = new GlideRecord('cmdb_rel_ci');
        virtualN_rel.initialize();
        virtualN_rel.parent = sA_id;
        virtualN_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
        virtualN_rel.child = res_rec;
        virtualN_rel.insert();

        // Check if the SOI CI exists  with the corresponding serviceInstanceName
		
		this.updateTagSoiciLink(tagSet, res_rec); //Create tags if exist and soici link with record
		
        return res_rec;
    },

    getstorageAccount: function(sAccount) {
        var v = sAccount.split('/blobServices');
        var sAcc = new GlideRecord('cmdb_ci_cloud_storage_account');
        sAcc.addEncodedQuery('object_idSTARTSWITH' + v[0]);
        sAcc.query();
        if (sAcc.next()) {
            return sAcc.sys_id;
        }
        return 'NotAvailable';
    },
	
	
	updateTagSoiciLink: function(tagSet, vm_azure_parent_rec) {
        if (tagSet.length > 0) {
            var serviceInstance_ID = new Emp_CI_Creation_Validation_Script().createTagResources(tagSet, vm_azure_parent_rec);

            // Check if the SOI CI exists  with the corresponding serviceInstanceName
            if (serviceInstance_ID) {
                var soi_ci_exists = new Emp_CI_Creation_Validation_Script().validateSOICIExists(serviceInstance_ID);

                if (soi_ci_exists) {
                    var soi_ci_rel = new GlideRecord('cmdb_rel_ci');
                    soi_ci_rel.initialize();
                    soi_ci_rel.parent = soi_ci_exists;
                    soi_ci_rel.type = new Emp_CI_Creation_Validation_Script().getRelationTypeName('Contains', 'Contained by');
                    soi_ci_rel.child = vm_azure_parent_rec;
                    soi_ci_rel.insert();
                }
            }
        }
 },
    type: 'Emp_CIWizMapper_Azure_CI_Configurations'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>rannep12@in.ibm.com</sys_created_by>
        <sys_created_on>2021-07-20 07:29:58</sys_created_on>
        <sys_id>f18c37c01ba9f4109c340e55cc4bcb75</sys_id>
        <sys_mod_count>267</sys_mod_count>
        <sys_name>Emp_CIWizMapper_Azure_CI_Configurations</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_script_include_f18c37c01ba9f4109c340e55cc4bcb75</sys_update_name>
        <sys_updated_by>sreedhar.mamilla@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-05-28 07:25:30</sys_updated_on>
    </sys_script_include>
</record_update>
