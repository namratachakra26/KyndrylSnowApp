<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmg3_hcms.GenerateSingleCart</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Generate Request item(s) using scoped Cart API for V1 version&#13;
/** &#13;
* @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. &#13;
* @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP &#13;
* Schedule Contract with Kyndryl Corp. &#13;
* @author Asha Bagade &#13;
* @Script Include is invoked from Scripted Rest API , to process Request and RITMcreation&#13;
**/</description>
        <name>GenerateSingleCart</name>
        <script><![CDATA[/*Scoped Cart API to create catalog item(s) and set variables and fields in catalog item*/
var GenerateSingleCart = Class.create();
GenerateSingleCart.prototype = {
    initialize: function() {},

    processRequest: function(strBody, location, requestedFor) {
        try {
            var parser = JSON.parse(strBody);
            var ritms = parser.requestedItems;
            //Log Requested items count from the incoming payload
            var ritmCount = ritms.length;
            new EmpLogLevel().logMsg('info', 'No of Requested items for Order ' + parser.orderNumber + ' is : ' + ritmCount);
            //Variable to hold Requested For
            var requestFor = requestedFor;
            //Variable to hold purpose of order mapped to ritm short desc
            var strShortDescription = parser.orderPurpose;
            var strDescription = parser.detailedComments;
            // to fetch the approval workflow which is optional
            var approvalExtWorkFlow = parser.approvalWorkflow;
            ////Obtaining Emp location Information
            var empLocation = location;
            var empOrderNumber = parser.orderNumber;
            //variable to hold the Request type(new/edit/terminate/operations)
            var empRequestType = parser.requestType;
            //variable to hold the catalogitem name sent in payload
            var catalogItemName = parser.catalog_item_name;
            var changeApprovalRequired = parser.changeApprovalRequired;
            if (changeApprovalRequired == "true")
                changeApprovalRequired = "normal"; //Has change Approval
            else
                changeApprovalRequired = "standard"; //No Approval

            if (empRequestType == 'New') {
                empRequestType = '1';
            }
            if (empRequestType == 'Terminate') {
                empRequestType = '2';
            }
            if (empRequestType == 'Edit') {
                empRequestType = '3';
            }
            if (empRequestType == 'operation') {
                empRequestType = '4';
            }
            //variable to hold the entire incoming json payload
            var empJson = strBody;
            var empOrderSubmittedDate = parser.orderSubmittedTime;
            var grSysId; //Variable to hold the sys_id of catalog item
            var cart;    //initialze variable for cart api
            
            //function to add multiple items into the cart
            cart = new sn_sc.CartJS();
            cart.empty();
            //Fetch the sys_id of the catalog item
            var catItName = new GlideRecord('sc_cat_item');
            catItName.addQuery('sys_name', catalogItemName);
            catItName.query();
            if (catItName.next()) {
                grSysId = (catItName.sys_id).toString();
            }

            /* Create one or more RITM based on payload */
            for (var i = 0; i < ritmCount; i++) {
                var arr = [];
                var itemServiceName = parser.requestedItems[i].serviceName;
                var serviceOfferingId = parser.requestedItems[i].serviceOfferingId;
                var soiID = parser.requestedItems[i].serviceOfferingInstanceId;
                var serviceProvider = parser.requestedItems[i].serviceOfferingProvider;
                var categoryID = parser.requestedItems[i].category;
                var serviceOfferingName = parser.requestedItems[i].serviceOfferingName;
                var ServiceOfferingDescription = parser.requestedItems[i].short_description;
                //initialize the catalog item fields and variables with all data
                var item = {
                    'sysparm_id': grSysId,
                    'sysparm_quantity': '1',
                    'variables': {
                        'var_requested_for': requestFor,
                        'short_description': ServiceOfferingDescription,
                        'var_description': strDescription,
                        'var_broker_location': empLocation,
                        'order_number': empOrderNumber,
                        'var_request_type': empRequestType,
                        'var_approval_workflow': approvalExtWorkFlow,
                        'var_broker_json': empJson,
                        'var_order_date': empOrderSubmittedDate,
                        'var_service_offering_id': serviceOfferingId,
                        'var_service_instance_id': soiID,
                        'var_service_name': itemServiceName,
                        'var_offering_provider': serviceProvider,
                        'var_consume_category': categoryID,
                        'var_change_type': changeApprovalRequired,
                        'var_service_offering_name': serviceOfferingName
                    }
                };
                var cartDetails = cart.addToCart(item);     //adding item to cart
            }
            var CartItems = cart.getCartItems();
            var rc = cart.submitOrder({});
            return rc.request_number;
        } catch (ex) {
            new EmpLogLevel().logMsg('error', "generate request using cart api error message " + ex);
        }
    },

    //function used to populate the requested for on Request form 
    getRequestedFor: function(strvar) {
        var requserId = new GlideRecord('sys_user');
        requserId.addEncodedQuery('email=' + strvar + '^ORuser_name =' + strvar);
        requserId.query();
        if (requserId.next()) {
            return requserId.sys_id.toString(); //return the sysid of user
        }
    },
    type: 'GenerateSingleCart'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>rannep12@in.ibm.com</sys_created_by>
        <sys_created_on>2018-07-11 05:38:39</sys_created_on>
        <sys_id>676d38e8dbd31780e0f5325f9d961904</sys_id>
        <sys_mod_count>296</sys_mod_count>
        <sys_name>GenerateSingleCart</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_script_include_676d38e8dbd31780e0f5325f9d961904</sys_update_name>
        <sys_updated_by>sreedhar.mamilla@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-05-28 07:40:28</sys_updated_on>
    </sys_script_include>
</record_update>
