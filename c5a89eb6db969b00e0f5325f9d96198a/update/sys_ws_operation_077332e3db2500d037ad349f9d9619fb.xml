<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>statechange (v2)</name>
        <operation_script><![CDATA[/** 
 * @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. 
 * @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP 
 * Schedule Contract with Kyndryl Corp.
 * @author Asha Bagade 
 * @Rest Api is invoked from EM for state change update**/
(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
    try {
        //Defining variables
        var reqBody = request.body.data;
        var approvalStatus, stateStatus, requestUpdateTs, cancelAction, requestedFor, requestNumber, checkIncidentFlag, requestSysId;
        var responseBody = {};
        //Track the order number
        var orderNumber = reqBody.orderNumber;
        //Variable to hold the event type
        var eventType = reqBody.eventType;
        requestedFor = reqBody.triggeredBy;
        var query = 'x_ibmg3_hcms_order_number=' + orderNumber + '^ORcorrelation_id=' + orderNumber;
        var trackingReq = new GlideRecord('sc_request');
        trackingReq.addEncodedQuery(query);
        trackingReq.query();
        if (trackingReq.next()) {
            requestNumber = trackingReq.number;
            requestSysId = trackingReq.sys_id;
            approvalStatus = trackingReq.approval.toString();
            stateStatus = trackingReq.request_state.toString();
            requestUpdateTs = trackingReq.sys_updated_on.toString();
            switch (eventType) {
                //set the approval controller and external approval field
                case 'APPROVALREQUEST':
                    if ((reqBody.approvalController == "ICB") && trackingReq.active) {
                        new EmpLogLevel().logMsg('info', '*State change v2 api payload for ICB approval request: *' + JSON.stringify(reqBody));
                        trackingReq.x_ibmg3_hcms_external_approval = "not_yet_requested";
                        trackingReq.x_ibmg3_hcms_approval_controller = "icb";
                        trackingReq.update();

                    } else if ((reqBody.approvalController == "SNOW") && trackingReq.active == true) {
                        new EmpLogLevel().logMsg('info', '*State change v2 api payload for SNOW approval request: *' + JSON.stringify(reqBody));
                        trackingReq.x_ibmg3_hcms_external_approval = "not_yet_requested";
                        trackingReq.x_ibmg3_hcms_approval_controller = "snow";
                        trackingReq.update();
                    }
                    break;

                case 'CANCEL':
                    new EmpLogLevel().logMsg('info', '*State change v2 api payload for CANCEL: *' + JSON.stringify(reqBody));
                    //check whether Incident is created for failure scenario or not
                    checkIncidentFlag = new CancelAfterFailure().changeCatalogTask(orderNumber);
                    var failedReason = "";
                    if ((approvalStatus == "approved" || approvalStatus == "rejected") && (!checkIncidentFlag && !trackingReq.x_ibmg3_hcms_requestapprovalhold)) {
                        cancelAction = "Request for Cancel is failed";
                        switch (approvalStatus) {
                            case 'approved':
                                if (stateStatus == "closed_complete")
                                    failedReason = "Already Approved and Completed";
                                else
                                    failedReason = "Already Approved";
                                break;

                            case 'rejected':
                                failedReason = "Already Rejected";
                                break;

                            default:
                                failedReason = "Cancellation Error";
                        }
                    } else if (((approvalStatus == "requested") || (approvalStatus == "not requested")) || trackingReq.x_ibmg3_hcms_requestapprovalhold == true) {
                        if (stateStatus == "closed_cancelled") {
                            cancelAction = "Request for Cancel is failed";
                            failedReason = "Already Cancelled";
                        } else {
                            // when requestapprovalhold is true, close the catalog task (Business rule : QS request closure restricts the closure of RITM if task is open)
                            var ritm = new GlideRecord('sc_req_item');
                            ritm.addQuery('request', requestSysId);
                            ritm.query();
                            while (ritm.next()) {
                                var catTask = new GlideRecord('sc_task');
                                if (catTask.get('request_item', ritm.sys_id)) {
                                    catTask.state = 4; //closed Incomplete
                                    catTask.update();
                                }
                            }
                            //Cancel the Request
                            trackingReq.request_state = "closed_cancelled";
                            trackingReq.stage = "closed_incomplete";
                            trackingReq.update();
                            new EmpLogLevel().logMsg('info', 'Request ' + requestNumber + ', closed cancelled for ordernumber: ' + orderNumber);
                            requestUpdateTs = trackingReq.sys_updated_on.toString();
                            //cancel the change if order is cancelled before change approval
                            var checkNormalChangeRequest = new CancelBeforeChangeApproval().normalChangeCancellation(requestSysId);
                            cancelAction = "Request for Cancel is successful";
                        }
                    }
                    //Populate the response body
                    responseBody.requested_for = requestedFor;
                    responseBody.sys_updated_on = requestUpdateTs;
                    responseBody.requestNumber = requestNumber;
                    responseBody.action = cancelAction;
                    responseBody.failed_reason = failedReason;
                    responseBody.requestType = "Cancel";
                    responseBody.approvalStatus = approvalStatus;
                    responseBody.orderNumber = orderNumber;
                    var strCancelResponse = JSON.stringify(responseBody);
                    new EmpLogLevel().logMsg('info', '*Cancel Response payload for order: ' + orderNumber + '* ' + strCancelResponse);
                    //Set the response body
                    response.setBody(responseBody);
                    new EmpLogLevel().logMsg('info', 'Request ' + requestNumber + ', closed cancelled for order: ' + orderNumber);
                    break;

                case 'APPROVALGRANT':
                    new EmpLogLevel().logMsg('info', '*State change v2 api payload for ICB approval grant: *' + JSON.stringify(reqBody));
                    trackingReq.x_ibmg3_hcms_external_approval = "approved";
                    trackingReq.x_ibmg3_hcms_requestapprovalhold = false;
                    trackingReq.update();
                    var reqItem = new GlideRecord('sc_req_item');
                    reqItem.addQuery('request', trackingReq.sys_id);
                    reqItem.query();
                    while (reqItem.next()) {
                        reqItem.comments = "Request approved, Change request initiated";
                        reqItem.update();
                    }
                    new EmpLogLevel().logMsg('info', '*State change v2 api response for ICB approval grant: *' + JSON.stringify(response.status));
                    break;

                case 'APPROVALREJECT':
                    new EmpLogLevel().logMsg('info', '*State change v2 api payload for ICB approval reject:*' + JSON.stringify(reqBody));
                    // when requestapprovalhold is true, close the catalog task (Business rule : QS request closure restricts the closure of RITM if task is open)
                    var ritmRec = new GlideRecord('sc_req_item');
                    ritmRec.addQuery('request', requestSysId);
                    ritmRec.query();
                    while (ritmRec.next()) {
                        var catTaskRec = new GlideRecord('sc_task');
                        catTaskRec.addQuery('request_item', ritmRec.sys_id);
                        catTaskRec.query();
                        if (catTaskRec.next()) {
                            catTaskRec.state = 4; //closed Incomplete
                            catTaskRec.update();
                        }
                    }
                    trackingReq.approval = "rejected";
                    trackingReq.x_ibmg3_hcms_external_approval = "rejected";
                    trackingReq.x_ibmg3_hcms_requestapprovalhold = false;
                    trackingReq.comments = "Order rejected in Enterprise Marketplace, hence request is closed rejected";
                    //Update the record
                    trackingReq.update();
                    new EmpLogLevel().logMsg('info', 'Request ' + requestNumber + ', closed rejected for order: ' + orderNumber);
                    break;
            } //end switch
        } else {
            message = "{\"message\":\"Service Request is not found for order:" + orderNumber + "\" ,\"code\":\"404\"}";
            new EmpRestApiUtils().raiseResponseError(message, "Service Request creation aborted", response);
        }
    } catch (err) {
        new EmpLogLevel.logMsg("error", "Request State change API: " + this.type + "(" + err + ")");
    }
})(request, response);]]></operation_script>
        <operation_uri>/api/x_ibmg3_hcms/v2/broker/request/statechange</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/request/statechange</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>debada54@in.ibm.com</sys_created_by>
        <sys_created_on>2019-12-12 10:35:33</sys_created_on>
        <sys_id>077332e3db2500d037ad349f9d9619fb</sys_id>
        <sys_mod_count>47</sys_mod_count>
        <sys_name>statechange (v2)</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_ws_operation_077332e3db2500d037ad349f9d9619fb</sys_update_name>
        <sys_updated_by>asha.bagade@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-05-29 10:03:05</sys_updated_on>
        <web_service_definition display_value="HCMS Broker">3a955909dbe3d70037ad349f9d96199a</web_service_definition>
        <web_service_version display_value="v2">3e7332e3db2500d037ad349f9d9619f3</web_service_version>
    </sys_ws_operation>
</record_update>
