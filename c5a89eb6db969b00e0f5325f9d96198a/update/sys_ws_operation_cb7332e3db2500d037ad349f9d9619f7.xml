<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>request (v2)</name>
        <operation_script><![CDATA[/**
 * @copyright(c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved.
 * @license Licensed Materials - Property of Kyndryl 
 * Note to U.S.Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP 
 * Schedule Contract with Kyndryl Corp. 
 * @author Asha Bagade 
 * @Rest Api is invoked from EM for creation of Request (cart enabled)**/

(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
    try {
        //Defining variables
        var requestType, requestedFor, requestNumber, requestor, isQsCatalog, anonymousUser = '';
        var body = request.body.data;
        var strBody = JSON.stringify(body);
        //Log incoming request payload from Enterprise marketplac
        new EmpLogLevel().logMsg('info', 'Incoming Request creation Payload for v2 api: ' + strBody);
        //Obtaining broker location Information
        var brokerLocation = body.icb_brokerLocation;
        //Track the order number
        var orderNumber = body.orderNumber;
        //Setting variable values from the request object
        requestedFor = body.requested_for;
        requestType = body.requestType;
        //property to hold discovery status(enabled/disabled)
        var isDiscoveryEnabled = gs.getProperty('x_ibmg3_hcms.mvp3.discovery.enabled');
        //Set a variable to establish a baseline for the validation check & anonymous user value
        var validationError;
        var anonymousUserFound = false;
        //Establish a variable to hold the response body
        var responseBody = {};

        //check if QS is enabled
        if (gs.getProperty('x_ibmg3_hcms.enable_quickstart') == "true")
            //check if QS catalog item
            isQsCatalog = new EmpRestApiUtils().qsCatalogCheck(body);
        //validation for mandatory paramater
        validationError = new EmpRestApiUtils().validateBaseElements(body, isQsCatalog, response);

        //Check property if system allows Anonymous User for Request creation
        var allowAnonymousUser = gs.getProperty('x_ibmg3_hcms.allow.anonymous.user');
        //Validate if requested_for is active in servicenow

        var userRec = new GlideRecord('sys_user');
        userRec.addEncodedQuery('email=' + requestedFor + '^ORuser_name =' + requestedFor + '^active=true');
        userRec.query();
        if (!userRec.next()) {
            anonymousUserFound = true; //Requested For user is not found in servicenow
            anonymousUser = requestedFor;
            new EmpLogLevel().logMsg('info', "Anonymous User Found: " + anonymousUserFound);
            if (allowAnonymousUser == 'true') { // Fetch the basic auth user and assign it to Requested For
                var authHeaders = request.getHeader("Authorization");
                authHeaders = authHeaders.split(" ");
                var auth = gs.base64Decode(authHeaders[1]);
                var split = auth.indexOf(":");
                if (split == -1) {
                    new EmpLogLevel().logMsg('info', 'Basic authentication not well formed');
                } else {
                    // locate integration user
                    var userName = auth.substring(0, split);
                    body.requested_for = userName.toString();
                    requestedFor = userName;
                }
            }
        }
        if ((!anonymousUserFound && allowAnonymousUser == 'false') || allowAnonymousUser == 'true') {
            // creation of SR begins    
            if (validationError == "false") {
                //Redirect to QS if Enable_QuickStart is ture and is a valid QS catalog item(vra order)
                if (gs.getProperty('x_ibmg3_hcms.enable_quickstart') && isQsCatalog) {
                    var requestedForFound = new RedirectionToQuickStartUtils().checkReqForAttributeExists(body);
                    for (l = 0; l < body.requestedItems.length; l++) {
                        //Add requestedBy property if anonymous user is sent
                        var requestedBy = {
                            "name": "requestedBy",
                            "value": anonymousUser.toString()
                        };
                        body.requestedItems[l].itemProperties[0].properties.push(requestedBy);
                        if (requestedForFound == 'false') {
                            var properties = body.requestedItems[l].itemProperties[0].properties.length;
                            var reqforObj = {
                                "name": "Requested For",
                                "value": requestedFor.toString()
                            };
                            body.requestedItems[l].itemProperties[0].properties[properties] = reqforObj;
                        }
                    }
                    //redirect to QS endpoint
                    var qsResponse = new RedirectionToQuickStartUtils().quickStartRequestCreation(body, requestedFor);
                    //return the requestnumber received frm QS
                    var status = JSON.stringify(qsResponse.statusCode);
                    if (status == "200") {
                        responseBody = qsResponse;
                        new EmpLogLevel().logMsg('info', 'Request created for order ' + orderNumber + ' is: ' + JSON.stringify(responseBody.requestNumber));
                        response.setBody(responseBody);
                    } else {
                        var msg = JSON.stringify(qsResponse.message.message);
                        new EmpLogLevel().logMsg('info', '*QS error for Request creation *' + msg);
                        new EmpRestApiUtils().raiseResponseError(msg, "JSON payload error", response);
                    }
                }
                //Call droplet if QS is not enabled or for public providers like aws,azure
                else {
                    if (requestType == 'New' || requestType == 'Edit' || requestType == 'Terminate' || requestType == 'operation') {
                        //invoke the SI , to process Request and RITM creation
                        requestNumber = new GenerateSingleCartV2().processRequest(strBody, brokerLocation, requestedFor);
                        //Log response request number from scoped cart API
                        new EmpLogLevel().logMsg('info', 'Request created  for order ' + orderNumber + 'is : *' + requestNumber);
                        //Set the response body
                        responseBody.requestNumber = requestNumber;
                        response.setBody(responseBody);
                    } else {
                        new EmpRestApiUtils().raiseResponseError("requestType attribute", "JSON payload error", response);
                    }
                }
            }
        } else {
            // throw error as there is no User in NOW instance.
            new EmpRestApiUtils().raiseResponseError("User not found in ServiceNow hence, no Service request created", "Service Request creation aborted", response);
        }
    } catch (err) {
        new EmpLogLevel().logMsg("error", "Request Creation API error: " + err.message);
    }

})(request, response);]]></operation_script>
        <operation_uri>/api/x_ibmg3_hcms/v2/broker/request</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/request</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>debada54@in.ibm.com</sys_created_by>
        <sys_created_on>2019-12-12 10:35:33</sys_created_on>
        <sys_id>cb7332e3db2500d037ad349f9d9619f7</sys_id>
        <sys_mod_count>141</sys_mod_count>
        <sys_name>request (v2)</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_ws_operation_cb7332e3db2500d037ad349f9d9619f7</sys_update_name>
        <sys_updated_by>asha.bagade@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-05-29 09:09:02</sys_updated_on>
        <web_service_definition display_value="HCMS Broker">3a955909dbe3d70037ad349f9d96199a</web_service_definition>
        <web_service_version display_value="v2">3e7332e3db2500d037ad349f9d9619f3</web_service_version>
    </sys_ws_operation>
</record_update>
