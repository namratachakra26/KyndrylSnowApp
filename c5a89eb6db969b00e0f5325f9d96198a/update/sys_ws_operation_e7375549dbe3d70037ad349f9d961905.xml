<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri>/api/x_ibmg3_hcms/broker/configurationItem</default_operation_uri>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>configurationItem</name>
        <operation_script><![CDATA[/** 
 * @copyright (c) Copyright Kyndryl Corporation 2021, 2021. All Rights Reserved. 
 * @license Licensed Materials - Property of Kyndryl * Note to U.S. Government Users Restricted Rights: Use, duplication or disclosure restricted by GSA ADP 
 * Schedule Contract with Kyndryl Corp. 
 * @author Asha Bagade 
 * @Rest Api is invoked from EM for ci update**/
(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
    try {
        //Define the payload
        var body = request.body.data;
        var imported = body.u_imported;
        var accountId, accountName, ritm, chg, reqType, type = '';
        var chTskDomain;
        //Log the body of the incoming API request
        var strIncomingRequest = JSON.stringify(body);
        //fetch change task number from incoming payload and get the related catalog item
        var chgTskNum = body.u_taskId;
        if (chgTskNum) {
            var chgTask = new GlideRecord('change_task');
            if (chgTask.get("number", chgTskNum)) {
                chg = chgTask.change_request;
                ritm = chgTask.change_request.u_qs_requested_item; // ritm(u_qs_requested_item) field is populated by QS
                chTskDomain = chgTask.sys_domain;
            }
        }
        if (chg) {
            var req_Item = new GlideRecord('sc_req_item');
            if (req_Item.get('x_ibmg3_hcms_related_change_request', chg)) {
                reqType = req_Item.request.x_ibmg3_hcms_broker_request_type;
                switch (reqType) {
                    case '1':
                        type = "New";
                        break;
                    case '2':
                        type = "Terminate";
                        break;
                    case '3':
                        type = "Edit";
                        break;
                    case '4':
                        type = req_Item.variables.var_service_offering_name;
                        break;
                }
            }
            new EmpLogLevel().logMsg("info", "CI Update v1 api " + type + " Payload: " + strIncomingRequest);
            var qsCatalog = 'false';

            //check if QS catalog item
            if (!imported && ritm && gs.getProperty('x_ibmg3_hcms.enable_quickstart')) {
                var reqItem = new GlideRecord('sc_req_item');
                if (reqItem.get('sys_id', ritm)) {
                    var mappingTable = new GlideRecord('u_quickstart_mvp3_mapping_table');
                    if (mappingTable.get('u_catalog_item', reqItem.cat_item)) {
                        qsCatalog = "true";
                    }
                }
            }
            //if Qs catalog item redirect to QS endpoint
            if (qsCatalog == "true") {
                //invoke redirection script
                var corrID = body.u_correlation_id;
                //Update the status of the CI update
                var ResponsePayload = {
                    "u_correlation_id": corrID,
                    "status": "Ci Update Successful"
                };
                //Log the body of the outgoing API response
                var strResponsePayload = JSON.stringify(ResponsePayload);
                new EmpLogLevel().logMsg("info", "CI Update v1 api - Response Payload: " + strResponsePayload);
                //Set the response body
                response.setBody(ResponsePayload);
                var qs = new RedirectionToQuickStartUtils().quickStartSocDetails(body, chTskDomain);
            } else {
                //droplet ci update begins
                //Set a variable for the validation check
                var validationError = new EmpRestApiUtils().validateCiElements(body, reponse); //Validate the Base elements
                //Defining variables
                var correlationID = body.u_correlation_id;
                var providerName = body.u_provider_name;
                var attributes = body.u_attributes;
                var updateStatus;
                var installStatus = body.u_install_status;
                var operationalStatus = body.u_operational_status;
                //variables to hold account information
                if (body.u_account) {
                    accountId = body.u_account.accountId;
                    accountName = body.u_account.accountNameMCMP;
                }
                //variable to hold the names of the resrcs
                var resourceIds = "";
                if (body.hasOwnProperty("u_resourceIds")) {
                    resourceIds = body.u_resourceIds.toString();
                }
                //variables to build the response
                var successResponsePayload = {};
                var strCreateServersResponse = {};
                // Retrieve ServiceInstance Name
                var instanceName = body.u_instance_name;
                //Define the tracking variables
                var trackingIDs = body.u_tracking_info;
                var stackID, deploymentID, requestID, resourceGroupID;
                var trackingField, stackIdValue, deploymentIdValue, requestIdValue, resourceGroupIdValue;
                for (var i = 0; i < trackingIDs.length; i++) {
                    switch (trackingIDs[i].name) {
                        case 'stack_id':
                            stackID = "true";
                            trackingField = trackingIDs[i].name;
                            stackIdValue = trackingIDs[i].value;
                            break;
                        case 'deployment_id':
                            deploymentID = "true";
                            trackingField = trackingIDs[i].name;
                            deploymentIdValue = trackingIDs[i].value;
                            break;
                        case 'request_id':
                            requestID = "true";
                            trackingField = trackingIDs[i].name;
                            requestIdValue = trackingIDs[i].value;
                            break;
                        case 'resource_group_id':
                            resourceGroupID = "true";
                            resourceGroupIdValue = trackingIDs[i].value;
                            break;
                    }
                } // end for

                if (validationError == "false") {
                    var configItem = new GlideRecord('x_ibmg3_hcms_cmdb_ci_mcms');
                    configItem.addQuery('correlation_id', correlationID);
                    configItem.query();
                    //Process the found record
                    if (configItem.next()) {
                        if (imported == false) {
                            if (installStatus == 7 && operationalStatus == 6) {
                                configItem.setValue("install_status", installStatus);
                                configItem.setValue("operational_status", operationalStatus);
                            } else {
                                //Set the values for the virtual server record
                                configItem.setValue("short_description", providerName);
                                configItem.setValue("install_status", installStatus);
                                configItem.setValue("operational_status", operationalStatus);
                                configItem.setValue("resource_id", resourceIds);
                                configItem.setValue("account_id", accountId);
                                configItem.setValue("account_name", accountName);
                                var attributesString = JSON.stringify(attributes);
                                configItem.setValue("attributes", attributesString);
                                //Set the value for the tracking IDs that are present in the payload
                                if (stackID == "true") {
                                    //Set trackingField value and stack ID
                                    configItem.setValue("x_ibmg3_hcms_tracking_field", trackingField);
                                    configItem.setValue("object_id", stackIdValue);
                                }
                                if (deploymentID == "true") {
                                    //Set trackingField value and deployment ID
                                    configItem.setValue("x_ibmg3_hcms_tracking_field", trackingField);
                                    configItem.setValue("object_id", deploymentIdValue);
                                }
                                if (requestID == "true") {
                                    //Set trackingField value and request ID
                                    configItem.setValue("x_ibmg3_hcms_tracking_field", trackingField);
                                    configItem.setValue("object_id", requestIdValue);
                                }
                                if (resourceGroupID == "true") {
                                    //Set resource group ID
                                    configItem.setValue("x_ibmg3_hcms_tracking_resource_group_id", resourceGroupIdValue);
                                }
                            }
                            //Update the CI Record
                            configItem.update();
                            //Update the status of the CI update
                            updateStatus = "CI Updated Successfully";
                            successResponsePayload = {
                                "u_correlation_id": correlationID,
                                "status": updateStatus
                            };
                            //Log the body of the outgoing API response
                            strCreateServersResponse = JSON.stringify(successResponsePayload);
                            new EmpLogLevel().logMsg("info", "Kyndryl Marketplace CI Update - Response Payload: " + strCreateServersResponse);
                            //Set the response body
                            response.setBody(successResponsePayload);
                        } else {
                            new EmpRestApiUtils().raiseResponseError("Ci already present", "JSON payload error", reponse);
                        }
                    } else {
                        if (imported == true) {
                            //Initialize Service instance ci
                            var ci = new GlideRecord('x_ibmg3_hcms_cmdb_ci_mcms');
                            ci.initialize();
                            ci.name = "VRI - Cloud CI ";
                            ci.instance_id = instanceName;
                            ci.correlation_id = correlationID;
                            //Map the value from Property which stores the assignment group name to be assigned to CI
                            var assignmentGroup = gs.getProperty('x_ibmg3_hcms.emp_cloud.ci_assignment_group');
                            ci.assignment_group.setDisplayValue(assignmentGroup);
                            if (installStatus == 7 && operationalStatus == 6) {
                                ci.install_status = installStatus;
                                ci.operational_status = operationalStatus;
                            } else {
                                //Set the values 
                                ci.short_description = providerName;
                                ci.install_status = installStatus;
                                ci.operational_status = operationalStatus;
                                ci.resource_id = resourceIds;
                                ci.account_id = accountId;
                                ci.account_name = accountName;
                                var attributesStrng = JSON.stringify(attributes);
                                ci.attributes = attributesStrng;
                                //Set the value for the tracking IDs that are present in the payload
                                if (stackID == "true") {
                                    //Set trackingField value and stack ID
                                    ci.x_ibmg3_hcms_tracking_field = trackingField;
                                    ci.object_id = stackID_value;
                                }
                                if (deploymentID == "true") {
                                    //Set trackingField value and deployment ID
                                    ci.x_ibmg3_hcms_tracking_field = trackingField;
                                    ci.object_id = deploymentIdValue;
                                }
                                if (requestID == "true") {
                                    //Set trackingField value and request ID
                                    ci.x_ibmg3_hcms_tracking_field = trackingField;
                                    ci.object_id = requestIdValue;
                                }
                                if (resourceGroupID == "true") {
                                    //Set resource group ID
                                    ci.x_ibmg3_hcms_tracking_resource_group_id = resourceGroupIdValue;
                                }
                            }
                            ci.insert();
                            new EmpLogLevel().logMsg("info", "Service Instance CI(Shell Ci) " + ci.name + " created ");
                            updateStatus = "CI Updated Successfully";
                            successResponsePayload = {
                                "u_correlation_id": correlationID,
                                "status": updateStatus
                            };
                            //Log the body of the outgoing API response
                            strCreateServersResponse = JSON.stringify(successResponsePayload);
                            new EmpLogLevel().logMsg("info", "Kyndryl Marketplace CI Update - Response Payload: " + strCreateServersResponse);
                            //Set the response body
                            response.setBody(successResponsePayload);
                        }
                    }
                } // end if - validation error
            }
        }
    } // end try
    catch (err) {
        new EmpLogLevel().logMsg("error", "Kyndryl Marketplace - CI Update API Error: " + this.type + "(" + err.message + ")");
        var catchBody = request.body.data;
        var catchCorrelationID = catchBody.u_correlation_id;
        //Update the status of the CI update
        var failedUpdateStatus = "CI Update Failed";
        var failureResponsePayload = {
            "u_correlation_id": catchCorrelationID,
            "status": failedUpdateStatus
        };
        //Set the response body
        response.setBody(failureResponsePayload);
    }
})(request, response);]]></operation_script>
        <operation_uri>/api/x_ibmg3_hcms/v1/broker/configurationItem</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/configurationItem</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>false</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>rannep12@in.ibm.com</sys_created_by>
        <sys_created_on>2018-07-25 07:00:31</sys_created_on>
        <sys_id>e7375549dbe3d70037ad349f9d961905</sys_id>
        <sys_mod_count>59</sys_mod_count>
        <sys_name>configurationItem</sys_name>
        <sys_package display_value="Kyndryl Modern Operations Applications Integration" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Kyndryl Modern Operations Applications Integration">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_ws_operation_e7375549dbe3d70037ad349f9d961905</sys_update_name>
        <sys_updated_by>asha.bagade@kyndryl.com</sys_updated_by>
        <sys_updated_on>2024-05-29 07:53:45</sys_updated_on>
        <web_service_definition display_value="HCMS Broker">3a955909dbe3d70037ad349f9d96199a</web_service_definition>
        <web_service_version display_value="v1">e691e14ddbe3d70037ad349f9d961962</web_service_version>
    </sys_ws_operation>
</record_update>
